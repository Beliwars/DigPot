

Microchip Technology PIC PRO Macro Assembler V1.37 build -260352376 
                                                                                               Thu Oct 27 22:59:31 2016

Microchip Technology Omniscient Code Generator v1.37 (PRO mode) build 201603110536
     1                           	processor	16F874
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text8,local,class=CODE,merge=1,delta=2
    16                           	psect	text9,local,class=CODE,merge=1,delta=2
    17                           	psect	text19,local,class=CODE,merge=1,delta=2
    18                           	psect	intentry,global,class=CODE,delta=2
    19                           	dabs	1,0x7E,2
    20  0000                     	;# 
    21  0001                     	;# 
    22  0002                     	;# 
    23  0003                     	;# 
    24  0004                     	;# 
    25  0005                     	;# 
    26  0006                     	;# 
    27  0007                     	;# 
    28  0008                     	;# 
    29  0009                     	;# 
    30  000A                     	;# 
    31  000B                     	;# 
    32  000C                     	;# 
    33  000D                     	;# 
    34  000E                     	;# 
    35  000E                     	;# 
    36  000F                     	;# 
    37  0010                     	;# 
    38  0011                     	;# 
    39  0012                     	;# 
    40  0013                     	;# 
    41  0014                     	;# 
    42  0015                     	;# 
    43  0015                     	;# 
    44  0016                     	;# 
    45  0017                     	;# 
    46  0018                     	;# 
    47  0019                     	;# 
    48  001A                     	;# 
    49  001B                     	;# 
    50  001B                     	;# 
    51  001C                     	;# 
    52  001D                     	;# 
    53  001E                     	;# 
    54  001F                     	;# 
    55  0081                     	;# 
    56  0085                     	;# 
    57  0086                     	;# 
    58  0087                     	;# 
    59  0088                     	;# 
    60  0089                     	;# 
    61  008C                     	;# 
    62  008D                     	;# 
    63  008E                     	;# 
    64  0091                     	;# 
    65  0092                     	;# 
    66  0093                     	;# 
    67  0094                     	;# 
    68  0098                     	;# 
    69  0099                     	;# 
    70  009E                     	;# 
    71  009F                     	;# 
    72  010C                     	;# 
    73  010D                     	;# 
    74  010E                     	;# 
    75  010F                     	;# 
    76  018C                     	;# 
    77  018D                     	;# 
    78  0000                     	;# 
    79  0001                     	;# 
    80  0002                     	;# 
    81  0003                     	;# 
    82  0004                     	;# 
    83  0005                     	;# 
    84  0006                     	;# 
    85  0007                     	;# 
    86  0008                     	;# 
    87  0009                     	;# 
    88  000A                     	;# 
    89  000B                     	;# 
    90  000C                     	;# 
    91  000D                     	;# 
    92  000E                     	;# 
    93  000E                     	;# 
    94  000F                     	;# 
    95  0010                     	;# 
    96  0011                     	;# 
    97  0012                     	;# 
    98  0013                     	;# 
    99  0014                     	;# 
   100  0015                     	;# 
   101  0015                     	;# 
   102  0016                     	;# 
   103  0017                     	;# 
   104  0018                     	;# 
   105  0019                     	;# 
   106  001A                     	;# 
   107  001B                     	;# 
   108  001B                     	;# 
   109  001C                     	;# 
   110  001D                     	;# 
   111  001E                     	;# 
   112  001F                     	;# 
   113  0081                     	;# 
   114  0085                     	;# 
   115  0086                     	;# 
   116  0087                     	;# 
   117  0088                     	;# 
   118  0089                     	;# 
   119  008C                     	;# 
   120  008D                     	;# 
   121  008E                     	;# 
   122  0091                     	;# 
   123  0092                     	;# 
   124  0093                     	;# 
   125  0094                     	;# 
   126  0098                     	;# 
   127  0099                     	;# 
   128  009E                     	;# 
   129  009F                     	;# 
   130  010C                     	;# 
   131  010D                     	;# 
   132  010E                     	;# 
   133  010F                     	;# 
   134  018C                     	;# 
   135  018D                     	;# 
   136  0000                     	;# 
   137  0001                     	;# 
   138  0002                     	;# 
   139  0003                     	;# 
   140  0004                     	;# 
   141  0005                     	;# 
   142  0006                     	;# 
   143  0007                     	;# 
   144  0008                     	;# 
   145  0009                     	;# 
   146  000A                     	;# 
   147  000B                     	;# 
   148  000C                     	;# 
   149  000D                     	;# 
   150  000E                     	;# 
   151  000E                     	;# 
   152  000F                     	;# 
   153  0010                     	;# 
   154  0011                     	;# 
   155  0012                     	;# 
   156  0013                     	;# 
   157  0014                     	;# 
   158  0015                     	;# 
   159  0015                     	;# 
   160  0016                     	;# 
   161  0017                     	;# 
   162  0018                     	;# 
   163  0019                     	;# 
   164  001A                     	;# 
   165  001B                     	;# 
   166  001B                     	;# 
   167  001C                     	;# 
   168  001D                     	;# 
   169  001E                     	;# 
   170  001F                     	;# 
   171  0081                     	;# 
   172  0085                     	;# 
   173  0086                     	;# 
   174  0087                     	;# 
   175  0088                     	;# 
   176  0089                     	;# 
   177  008C                     	;# 
   178  008D                     	;# 
   179  008E                     	;# 
   180  0091                     	;# 
   181  0092                     	;# 
   182  0093                     	;# 
   183  0094                     	;# 
   184  0098                     	;# 
   185  0099                     	;# 
   186  009E                     	;# 
   187  009F                     	;# 
   188  010C                     	;# 
   189  010D                     	;# 
   190  010E                     	;# 
   191  010F                     	;# 
   192  018C                     	;# 
   193  018D                     	;# 
   194  0000                     	;# 
   195  0001                     	;# 
   196  0002                     	;# 
   197  0003                     	;# 
   198  0004                     	;# 
   199  0005                     	;# 
   200  0006                     	;# 
   201  0007                     	;# 
   202  0008                     	;# 
   203  0009                     	;# 
   204  000A                     	;# 
   205  000B                     	;# 
   206  000C                     	;# 
   207  000D                     	;# 
   208  000E                     	;# 
   209  000E                     	;# 
   210  000F                     	;# 
   211  0010                     	;# 
   212  0011                     	;# 
   213  0012                     	;# 
   214  0013                     	;# 
   215  0014                     	;# 
   216  0015                     	;# 
   217  0015                     	;# 
   218  0016                     	;# 
   219  0017                     	;# 
   220  0018                     	;# 
   221  0019                     	;# 
   222  001A                     	;# 
   223  001B                     	;# 
   224  001B                     	;# 
   225  001C                     	;# 
   226  001D                     	;# 
   227  001E                     	;# 
   228  001F                     	;# 
   229  0081                     	;# 
   230  0085                     	;# 
   231  0086                     	;# 
   232  0087                     	;# 
   233  0088                     	;# 
   234  0089                     	;# 
   235  008C                     	;# 
   236  008D                     	;# 
   237  008E                     	;# 
   238  0091                     	;# 
   239  0092                     	;# 
   240  0093                     	;# 
   241  0094                     	;# 
   242  0098                     	;# 
   243  0099                     	;# 
   244  009E                     	;# 
   245  009F                     	;# 
   246  010C                     	;# 
   247  010D                     	;# 
   248  010E                     	;# 
   249  010F                     	;# 
   250  018C                     	;# 
   251  018D                     	;# 
   252                           
   253                           	psect	idataBANK0
   254  0000                     __pidataBANK0:	
   255                           
   256                           	psect	strings
   257  0339                     __pstrings:	
   258  0339                     stringtab:	
   259  0339                     __stringtab:	
   260  0339                     stringcode:	
   261                           ;	String table - string pointers are 1 byte each
   262                           
   263  0339                     stringdir:	
   264  0339  3003               	movlw	high stringdir
   265  033A  008A               	movwf	10
   266  033B  0804               	movf	4,w
   267  033C  0A84               	incf	4,f
   268  033D  0782               	addwf	2,f
   269  033E                     __stringbase:	
   270  033E  3400               	retlw	0
   271  033F                     __end_of__stringtab:	
   272  033F                     _dpowers:	
   273  033F  3401               	retlw	1
   274  0340  3400               	retlw	0
   275  0341  340A               	retlw	10
   276  0342  3400               	retlw	0
   277  0343  3464               	retlw	100
   278  0344  3400               	retlw	0
   279  0345  34E8               	retlw	232
   280  0346  3403               	retlw	3
   281  0347  3410               	retlw	16
   282  0348  3427               	retlw	39
   283  0349                     __end_of_dpowers:	
   284  0349                     STR_2:	
   285  0349  340B               	retlw	11
   286  034A  3401               	retlw	1
   287  034B  3444               	retlw	68	;'D'
   288  034C  3469               	retlw	105	;'i'
   289  034D  3467               	retlw	103	;'g'
   290  034E  3469               	retlw	105	;'i'
   291  034F  3474               	retlw	116	;'t'
   292  0350  3461               	retlw	97	;'a'
   293  0351  346C               	retlw	108	;'l'
   294  0352  3420               	retlw	32	;' '
   295  0353  3450               	retlw	80	;'P'
   296  0354  346F               	retlw	111	;'o'
   297  0355  3474               	retlw	116	;'t'
   298  0356  3420               	retlw	32	;' '
   299  0357  3449               	retlw	73	;'I'
   300  0358  346E               	retlw	110	;'n'
   301  0359  3469               	retlw	105	;'i'
   302  035A  3474               	retlw	116	;'t'
   303  035B  3469               	retlw	105	;'i'
   304  035C  3461               	retlw	97	;'a'
   305  035D  346C               	retlw	108	;'l'
   306  035E  3469               	retlw	105	;'i'
   307  035F  347A               	retlw	122	;'z'
   308  0360  3469               	retlw	105	;'i'
   309  0361  346E               	retlw	110	;'n'
   310  0362  3467               	retlw	103	;'g'
   311  0363  3420               	retlw	32	;' '
   312  0364  342E               	retlw	46	;'.'
   313  0365  342E               	retlw	46	;'.'
   314  0366  342E               	retlw	46	;'.'
   315  0367  3400               	retlw	0
   316  0368                     STR_3:	
   317  0368  3444               	retlw	68	;'D'
   318  0369  3469               	retlw	105	;'i'
   319  036A  3467               	retlw	103	;'g'
   320  036B  3450               	retlw	80	;'P'
   321  036C  346F               	retlw	111	;'o'
   322  036D  3474               	retlw	116	;'t'
   323  036E  3420               	retlw	32	;' '
   324  036F  3449               	retlw	73	;'I'
   325  0370  346E               	retlw	110	;'n'
   326  0371  3469               	retlw	105	;'i'
   327  0372  3474               	retlw	116	;'t'
   328  0373  3469               	retlw	105	;'i'
   329  0374  3461               	retlw	97	;'a'
   330  0375  346C               	retlw	108	;'l'
   331  0376  3469               	retlw	105	;'i'
   332  0377  347A               	retlw	122	;'z'
   333  0378  3469               	retlw	105	;'i'
   334  0379  346E               	retlw	110	;'n'
   335  037A  3467               	retlw	103	;'g'
   336  037B  3420               	retlw	32	;' '
   337  037C  342E               	retlw	46	;'.'
   338  037D  342E               	retlw	46	;'.'
   339  037E  342E               	retlw	46	;'.'
   340  037F  3400               	retlw	0
   341  0380                     STR_1:	
   342  0380  3408               	retlw	8
   343  0381  3455               	retlw	85	;'U'
   344  0382  3441               	retlw	65	;'A'
   345  0383  3452               	retlw	82	;'R'
   346  0384  3454               	retlw	84	;'T'
   347  0385  3420               	retlw	32	;' '
   348  0386  3449               	retlw	73	;'I'
   349  0387  346E               	retlw	110	;'n'
   350  0388  3469               	retlw	105	;'i'
   351  0389  3463               	retlw	99	;'c'
   352  038A  3469               	retlw	105	;'i'
   353  038B  3461               	retlw	97	;'a'
   354  038C  346C               	retlw	108	;'l'
   355  038D  3469               	retlw	105	;'i'
   356  038E  347A               	retlw	122	;'z'
   357  038F  3461               	retlw	97	;'a'
   358  0390  3464               	retlw	100	;'d'
   359  0391  346F               	retlw	111	;'o'
   360  0392  342E               	retlw	46	;'.'
   361  0393  342E               	retlw	46	;'.'
   362  0394  342E               	retlw	46	;'.'
   363  0395  340A               	retlw	10
   364  0396  3400               	retlw	0
   365  0397                     STR_9:	
   366  0397  340B               	retlw	11
   367  0398  3401               	retlw	1
   368  0399  3444               	retlw	68	;'D'
   369  039A  3469               	retlw	105	;'i'
   370  039B  3467               	retlw	103	;'g'
   371  039C  3450               	retlw	80	;'P'
   372  039D  346F               	retlw	111	;'o'
   373  039E  3474               	retlw	116	;'t'
   374  039F  3420               	retlw	32	;' '
   375  03A0  3452               	retlw	82	;'R'
   376  03A1  3465               	retlw	101	;'e'
   377  03A2  3461               	retlw	97	;'a'
   378  03A3  3464               	retlw	100	;'d'
   379  03A4  3479               	retlw	121	;'y'
   380  03A5  3420               	retlw	32	;' '
   381  03A6  3432               	retlw	50	;'2'
   382  03A7  3467               	retlw	103	;'g'
   383  03A8  346F               	retlw	111	;'o'
   384  03A9  3400               	retlw	0
   385  03AA                     STR_10:	
   386  03AA  340B               	retlw	11
   387  03AB  34C0               	retlw	-64
   388  03AC  3443               	retlw	67	;'C'
   389  03AD  346F               	retlw	111	;'o'
   390  03AE  3475               	retlw	117	;'u'
   391  03AF  346E               	retlw	110	;'n'
   392  03B0  3474               	retlw	116	;'t'
   393  03B1  3465               	retlw	101	;'e'
   394  03B2  3472               	retlw	114	;'r'
   395  03B3  343A               	retlw	58	;':'
   396  03B4  3420               	retlw	32	;' '
   397  03B5  3425               	retlw	37	;'%'
   398  03B6  3464               	retlw	100	;'d'
   399  03B7  3420               	retlw	32	;' '
   400  03B8  3464               	retlw	100	;'d'
   401  03B9  3442               	retlw	66	;'B'
   402  03BA  3400               	retlw	0
   403  03BB                     STR_4:	
   404  03BB  340B               	retlw	11
   405  03BC  34C0               	retlw	-64
   406  03BD  342E               	retlw	46	;'.'
   407  03BE  3400               	retlw	0
   408  03BD                     
   409                           ; #config settings
   410  0000                     
   411                           	psect	nvBANK0
   412  005B                     __pnvBANK0:	
   413  005B                     _eusartTxBufferRemaining:	
   414  005B                     	ds	1
   415  001F                     _ADCON0	set	31
   416  000B                     _INTCONbits	set	11
   417  000C                     _PIR1bits	set	12
   418  0006                     _PORTB	set	6
   419  0006                     _PORTBbits	set	6
   420  0008                     _PORTD	set	8
   421  001A                     _RCREG	set	26
   422  0018                     _RCSTA	set	24
   423  0018                     _RCSTAbits	set	24
   424  0013                     _SSPBUF	set	19
   425  0014                     _SSPCON	set	20
   426  0019                     _TXREG	set	25
   427  006B                     _BCLIF	set	107
   428  0063                     _SSPIF	set	99
   429  009F                     _ADCON1	set	159
   430  0081                     _OPTION_REGbits	set	129
   431  008C                     _PIE1bits	set	140
   432  0099                     _SPBRG	set	153
   433  0093                     _SSPADD	set	147
   434  0091                     _SSPCON2	set	145
   435  0094                     _SSPSTAT	set	148
   436  0085                     _TRISA	set	133
   437  0086                     _TRISBbits	set	134
   438  0087                     _TRISCbits	set	135
   439  0088                     _TRISD	set	136
   440  0098                     _TXSTA	set	152
   441  048E                     _ACKSTAT	set	1166
   442  04A2                     _R_W	set	1186
   443  0488                     _SEN	set	1160
   444                           
   445                           	psect	cinit
   446  0011                     start_initialization:	
   447  0011                     __initialization:	
   448                           
   449                           ; Clear objects allocated to BANK0
   450  0011  1383               	bcf	3,7	;select IRP bank0
   451  0012  3041               	movlw	low __pbssBANK0
   452  0013  0084               	movwf	4
   453  0014  305B               	movlw	low (__pbssBANK0+26)
   454  0015  118A  247D         	fcall	clear_ram0
   455                           
   456                           ;initializer for _counter
   457  0017  3001               	movlw	1
   458  0018  00DC               	movwf	__pdataBANK0& (0+127)
   459  0019                     end_of_initialization:	
   460                           ;End of C runtime variable initialization code
   461                           
   462  0019                     __end_of__initialization:	
   463  0019  0183               	clrf	3
   464  001A  118A  2A2E         	ljmp	_main	;jump to C main() function
   465                           
   466                           	psect	bssBANK0
   467  0041                     __pbssBANK0:	
   468  0041                     _eusartRxBuffer:	
   469  0041                     	ds	8
   470  0049                     _eusartTxBuffer:	
   471  0049                     	ds	8
   472  0051                     _RBP1:	
   473  0051                     	ds	1
   474  0052                     _RBP1_prev:	
   475  0052                     	ds	1
   476  0053                     _RBP2:	
   477  0053                     	ds	1
   478  0054                     _RS:	
   479  0054                     	ds	1
   480  0055                     _changed:	
   481  0055                     	ds	1
   482  0056                     _eusartRxCount:	
   483  0056                     	ds	1
   484  0057                     _eusartRxHead:	
   485  0057                     	ds	1
   486  0058                     _eusartTxHead:	
   487  0058                     	ds	1
   488  0059                     _eusartTxTail:	
   489  0059                     	ds	1
   490  005A                     _uart:	
   491  005A                     	ds	1
   492                           
   493                           	psect	dataBANK0
   494  005C                     __pdataBANK0:	
   495  005C                     _counter:	
   496  005C                     	ds	1
   497                           
   498                           	psect	clrtext
   499  047D                     clear_ram0:	
   500                           ;	Called with FSR containing the base address, and
   501                           ;	W with the last address+1
   502                           
   503  047D  0064               	clrwdt	;clear the watchdog before getting into this loop
   504  047E                     clrloop0:	
   505  047E  0180               	clrf	0	;clear RAM location pointed to by FSR
   506  047F  0A84               	incf	4,f	;increment pointer
   507  0480  0604               	xorwf	4,w	;XOR with final address
   508  0481  1903               	btfsc	3,2	;have we reached the end yet?
   509  0482  3400               	retlw	0	;all done for this memory range, return
   510  0483  0604               	xorwf	4,w	;XOR again to restore value
   511  0484  2C7E               	goto	clrloop0	;do the next byte
   512                           
   513                           	psect	cstackCOMMON
   514  0000                     __pcstackCOMMON:	
   515  0000                     ??_EUSART_Transmit_ISR:	
   516  0000                     ??_EUSART_Receive_ISR:	
   517                           ; 1 bytes @ 0x0
   518                           
   519  0000                     ??_SYSTEM_Initialize:	
   520                           ; 1 bytes @ 0x0
   521                           
   522  0000                     ??_I2C_Start:	
   523                           ; 1 bytes @ 0x0
   524                           
   525  0000                     ??_lcd_write_cmd:	
   526                           ; 1 bytes @ 0x0
   527                           
   528  0000                     ??_LCD_Write_Str:	
   529                           ; 1 bytes @ 0x0
   530                           
   531  0000                     ??_scrollDisplayLeft:	
   532                           ; 1 bytes @ 0x0
   533                           
   534  0000                     ??_PIN_Initialize:	
   535                           ; 1 bytes @ 0x0
   536                           
   537  0000                     ??_EUSART_Initialize:	
   538                           ; 1 bytes @ 0x0
   539                           
   540  0000                     ??_EUSART_Write:	
   541                           ; 1 bytes @ 0x0
   542                           
   543  0000                     ??_Write_I2C:	
   544                           ; 1 bytes @ 0x0
   545                           
   546  0000                     ??_lcd_write_byte:	
   547                           ; 1 bytes @ 0x0
   548                           
   549  0000                     ??___lwdiv:	
   550                           ; 1 bytes @ 0x0
   551                           
   552  0000                     ??___lwmod:	
   553                           ; 1 bytes @ 0x0
   554                           
   555                           
   556                           	psect	cstackBANK0
   557  0020                     __pcstackBANK0:	
   558                           ; 1 bytes @ 0x0
   559                           
   560  0020                     ?_EUSART_Transmit_ISR:	
   561  0020                     ?_EUSART_Receive_ISR:	
   562                           ; 1 bytes @ 0x0
   563                           
   564  0020                     ?_SYSTEM_Initialize:	
   565                           ; 1 bytes @ 0x0
   566                           
   567  0020                     ?_I2C_Start:	
   568                           ; 1 bytes @ 0x0
   569                           
   570  0020                     ?_LCD_Init:	
   571                           ; 1 bytes @ 0x0
   572                           
   573  0020                     ?_lcd_write_cmd:	
   574                           ; 1 bytes @ 0x0
   575                           
   576  0020                     ?_LCD_Write_Str:	
   577                           ; 1 bytes @ 0x0
   578                           
   579  0020                     ?_scrollDisplayLeft:	
   580                           ; 1 bytes @ 0x0
   581                           
   582  0020                     ?_delay:	
   583                           ; 1 bytes @ 0x0
   584                           
   585  0020                     ?_strobe:	
   586                           ; 1 bytes @ 0x0
   587                           
   588  0020                     ?_PIN_Initialize:	
   589                           ; 1 bytes @ 0x0
   590                           
   591  0020                     ?_InterruptManager:	
   592                           ; 1 bytes @ 0x0
   593                           
   594  0020                     ??_InterruptManager:	
   595                           ; 1 bytes @ 0x0
   596                           
   597  0020                     ?_main:	
   598                           ; 1 bytes @ 0x0
   599                           
   600  0020                     ?_EUSART_Initialize:	
   601                           ; 1 bytes @ 0x0
   602                           
   603  0020                     ?_EUSART_Write:	
   604                           ; 1 bytes @ 0x0
   605                           
   606  0020                     ?_is_I2C_idle:	
   607                           ; 1 bytes @ 0x0
   608                           
   609  0020                     ?_Write_I2C:	
   610                           ; 1 bytes @ 0x0
   611                           
   612  0020                     ?_lcd_write_byte:	
   613                           ; 1 bytes @ 0x0
   614                           
   615  0020                     ?_putch:	
   616                           ; 1 bytes @ 0x0
   617                           
   618                           
   619                           ; 1 bytes @ 0x0
   620  0020                     	ds	3
   621  0023                     ??_delay:	
   622  0023                     ??_is_I2C_idle:	
   623                           ; 1 bytes @ 0x3
   624                           
   625  0023                     ?___lwdiv:	
   626                           ; 1 bytes @ 0x3
   627                           
   628  0023                     EUSART_Write@txData:	
   629                           ; 2 bytes @ 0x3
   630                           
   631  0023                     ___lwdiv@divisor:	
   632                           ; 1 bytes @ 0x3
   633                           
   634                           
   635                           ; 2 bytes @ 0x3
   636  0023                     	ds	2
   637  0025                     delay@count:	
   638  0025                     ___lwdiv@dividend:	
   639                           ; 1 bytes @ 0x5
   640                           
   641                           
   642                           ; 2 bytes @ 0x5
   643  0025                     	ds	1
   644  0026                     delay@i:	
   645                           
   646                           ; 2 bytes @ 0x6
   647  0026                     	ds	1
   648  0027                     ___lwdiv@quotient:	
   649                           
   650                           ; 2 bytes @ 0x7
   651  0027                     	ds	1
   652  0028                     Write_I2C@data:	
   653                           
   654                           ; 1 bytes @ 0x8
   655  0028                     	ds	1
   656  0029                     Write_I2C@ackflag:	
   657  0029                     ___lwdiv@counter:	
   658                           ; 1 bytes @ 0x9
   659                           
   660                           
   661                           ; 1 bytes @ 0x9
   662  0029                     	ds	1
   663  002A                     ??_strobe:	
   664  002A                     ?___lwmod:	
   665                           ; 1 bytes @ 0xA
   666                           
   667  002A                     ___lwmod@divisor:	
   668                           ; 2 bytes @ 0xA
   669                           
   670                           
   671                           ; 2 bytes @ 0xA
   672  002A                     	ds	1
   673  002B                     strobe@cmd:	
   674                           
   675                           ; 1 bytes @ 0xB
   676  002B                     	ds	1
   677  002C                     lcd_write_byte@data:	
   678  002C                     lcd_write_cmd@cmd:	
   679                           ; 1 bytes @ 0xC
   680                           
   681  002C                     ___lwmod@dividend:	
   682                           ; 1 bytes @ 0xC
   683                           
   684                           
   685                           ; 2 bytes @ 0xC
   686  002C                     	ds	1
   687  002D                     lcd_write_byte@shadow:	
   688  002D                     lcd_write_cmd@shadow:	
   689                           ; 1 bytes @ 0xD
   690                           
   691                           
   692                           ; 1 bytes @ 0xD
   693  002D                     	ds	1
   694  002E                     ??_LCD_Init:	
   695  002E                     ??_putch:	
   696                           ; 1 bytes @ 0xE
   697                           
   698  002E                     LCD_Write_Str@message:	
   699                           ; 1 bytes @ 0xE
   700                           
   701  002E                     ___lwmod@counter:	
   702                           ; 1 bytes @ 0xE
   703                           
   704                           
   705                           ; 1 bytes @ 0xE
   706  002E                     	ds	1
   707  002F                     LCD_Write_Str@message_ptr:	
   708                           
   709                           ; 1 bytes @ 0xF
   710  002F                     	ds	1
   711  0030                     putch@data:	
   712                           
   713                           ; 1 bytes @ 0x10
   714  0030                     	ds	1
   715  0031                     ?_printf:	
   716                           
   717                           ; 2 bytes @ 0x11
   718  0031                     	ds	2
   719  0033                     ??_printf:	
   720                           
   721                           ; 1 bytes @ 0x13
   722  0033                     	ds	2
   723  0035                     printf@ap:	
   724                           
   725                           ; 1 bytes @ 0x15
   726  0035                     	ds	1
   727  0036                     printf@flag:	
   728                           
   729                           ; 1 bytes @ 0x16
   730  0036                     	ds	1
   731  0037                     printf@prec:	
   732                           
   733                           ; 1 bytes @ 0x17
   734  0037                     	ds	1
   735  0038                     printf@val:	
   736                           
   737                           ; 2 bytes @ 0x18
   738  0038                     	ds	2
   739  003A                     printf@f:	
   740                           
   741                           ; 1 bytes @ 0x1A
   742  003A                     	ds	1
   743  003B                     printf@c:	
   744                           
   745                           ; 1 bytes @ 0x1B
   746  003B                     	ds	1
   747  003C                     ??_main:	
   748                           
   749                           ; 1 bytes @ 0x1C
   750  003C                     	ds	3
   751  003F                     main@i:	
   752                           
   753                           ; 2 bytes @ 0x1F
   754  003F                     	ds	2
   755                           
   756                           	psect	maintext
   757  022E                     __pmaintext:	
   758 ;;
   759 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   760 ;;
   761 ;; *************** function _main *****************
   762 ;; Defined at:
   763 ;;		line 129 in file "main.c"
   764 ;; Parameters:    Size  Location     Type
   765 ;;		None
   766 ;; Auto vars:     Size  Location     Type
   767 ;;  i               2   31[BANK0 ] int 
   768 ;; Return value:  Size  Location     Type
   769 ;;                  1    wreg      void 
   770 ;; Registers used:
   771 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   772 ;; Tracked objects:
   773 ;;		On entry : B00/0
   774 ;;		On exit  : 300/0
   775 ;;		Unchanged: 0/0
   776 ;; Data sizes:     COMMON   BANK0   BANK1
   777 ;;      Params:         0       0       0
   778 ;;      Locals:         0       2       0
   779 ;;      Temps:          0       3       0
   780 ;;      Totals:         0       5       0
   781 ;;Total ram usage:        5 bytes
   782 ;; Hardware stack levels required when called:    8
   783 ;; This function calls:
   784 ;;		_I2C_Start
   785 ;;		_LCD_Init
   786 ;;		_LCD_Write_Str
   787 ;;		_SYSTEM_Initialize
   788 ;;		_delay
   789 ;;		_lcd_write_cmd
   790 ;;		_printf
   791 ;;		_scrollDisplayLeft
   792 ;; This function is called by:
   793 ;;		Startup code after reset
   794 ;; This function uses a non-reentrant model
   795 ;;
   796                           
   797                           
   798                           ;psect for function _main
   799  022E                     _main:	
   800                           
   801                           ;main.c: 135: SYSTEM_Initialize();
   802                           
   803                           ;incstack = 0
   804                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   805  022E  118A  2426  118A   	fcall	_SYSTEM_Initialize
   806                           
   807                           ;main.c: 136: I2C_Start();
   808  0231  118A  2021  118A   	fcall	_I2C_Start
   809                           
   810                           ;main.c: 137: LCD_Init();
   811  0234  118A  204F  118A   	fcall	_LCD_Init
   812                           
   813                           ;main.c: 143: (INTCONbits.RBIE = 1);
   814  0237  158B               	bsf	11,3	;volatile
   815                           
   816                           ;main.c: 144: (INTCONbits.PEIE = 1);
   817  0238  170B               	bsf	11,6	;volatile
   818                           
   819                           ;main.c: 145: (INTCONbits.GIE = 1);
   820  0239  178B               	bsf	11,7	;volatile
   821                           
   822                           ;main.c: 147: printf("\b" "UART Inicializado...\n");
   823  023A  3042               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   824  023B  118A  20B1  118A   	fcall	_printf
   825                           
   826                           ;main.c: 149: printf( "\v\x01" "Digital Pot Initializing ...");
   827  023E  300B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   828  023F  118A  20B1  118A   	fcall	_printf
   829                           
   830                           ;main.c: 150: lcd_write_cmd(0x01);
   831  0242  3001               	movlw	1
   832  0243  118A  203E  118A   	fcall	_lcd_write_cmd
   833                           
   834                           ;main.c: 151: _delay((unsigned long)((5)*(20000000/4000.0)));
   835  0246  3021               	movlw	33
   836  0247  00BD               	movwf	??_main+1
   837  0248  3076               	movlw	118
   838  0249  00BC               	movwf	??_main
   839  024A                     u977:	
   840  024A  0BBC               	decfsz	??_main,f
   841  024B  2A4A               	goto	u977
   842  024C  0BBD               	decfsz	??_main+1,f
   843  024D  2A4A               	goto	u977
   844  024E  0000               	nop
   845                           
   846                           ;main.c: 152: LCD_Write_Str("DigPot Initializing ...");
   847  024F  302A               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   848  0250  118A  2029  118A   	fcall	_LCD_Write_Str
   849                           
   850                           ;main.c: 153: _delay((unsigned long)((50)*(20000000/4000.0)));
   851  0253  3002               	movlw	2
   852  0254  00BE               	movwf	??_main+2
   853  0255  3045               	movlw	69
   854  0256  00BD               	movwf	??_main+1
   855  0257  30A9               	movlw	169
   856  0258  00BC               	movwf	??_main
   857  0259                     u987:	
   858  0259  0BBC               	decfsz	??_main,f
   859  025A  2A59               	goto	u987
   860  025B  0BBD               	decfsz	??_main+1,f
   861  025C  2A59               	goto	u987
   862  025D  0BBE               	decfsz	??_main+2,f
   863  025E  2A59               	goto	u987
   864  025F  2A60               	nop2
   865                           
   866                           ;main.c: 154: printf( "\v\xC0" ".");
   867  0260  307D               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   868  0261  118A  20B1  118A   	fcall	_printf
   869                           
   870                           ;main.c: 155: _delay((unsigned long)((500)*(20000000/4000.0)));
   871  0264  300D               	movlw	13
   872  0265  00BE               	movwf	??_main+2
   873  0266  30AF               	movlw	175
   874  0267  00BD               	movwf	??_main+1
   875  0268  30C1               	movlw	193
   876  0269  00BC               	movwf	??_main
   877  026A                     u997:	
   878  026A  0BBC               	decfsz	??_main,f
   879  026B  2A6A               	goto	u997
   880  026C  0BBD               	decfsz	??_main+1,f
   881  026D  2A6A               	goto	u997
   882  026E  0BBE               	decfsz	??_main+2,f
   883  026F  2A6A               	goto	u997
   884  0270  0000               	nop
   885                           
   886                           ;main.c: 156: printf(".");
   887  0271  307F               	movlw	(low (((STR_4+2)-__stringbase)| (0+32768)))& (0+255)
   888  0272  118A  20B1  118A   	fcall	_printf
   889                           
   890                           ;main.c: 157: _delay((unsigned long)((500)*(20000000/4000.0)));
   891  0275  300D               	movlw	13
   892  0276  00BE               	movwf	??_main+2
   893  0277  30AF               	movlw	175
   894  0278  00BD               	movwf	??_main+1
   895  0279  30C1               	movlw	193
   896  027A  00BC               	movwf	??_main
   897  027B                     u1007:	
   898  027B  0BBC               	decfsz	??_main,f
   899  027C  2A7B               	goto	u1007
   900  027D  0BBD               	decfsz	??_main+1,f
   901  027E  2A7B               	goto	u1007
   902  027F  0BBE               	decfsz	??_main+2,f
   903  0280  2A7B               	goto	u1007
   904  0281  0000               	nop
   905                           
   906                           ;main.c: 158: printf(".");
   907  0282  307F               	movlw	(low (((STR_4+2)-__stringbase)| (0+32768)))& (0+255)
   908  0283  118A  20B1  118A   	fcall	_printf
   909                           
   910                           ;main.c: 159: _delay((unsigned long)((500)*(20000000/4000.0)));
   911  0286  300D               	movlw	13
   912  0287  00BE               	movwf	??_main+2
   913  0288  30AF               	movlw	175
   914  0289  00BD               	movwf	??_main+1
   915  028A  30C1               	movlw	193
   916  028B  00BC               	movwf	??_main
   917  028C                     u1017:	
   918  028C  0BBC               	decfsz	??_main,f
   919  028D  2A8C               	goto	u1017
   920  028E  0BBD               	decfsz	??_main+1,f
   921  028F  2A8C               	goto	u1017
   922  0290  0BBE               	decfsz	??_main+2,f
   923  0291  2A8C               	goto	u1017
   924  0292  0000               	nop
   925                           
   926                           ;main.c: 160: printf(".");
   927  0293  307F               	movlw	(low (((STR_4+2)-__stringbase)| (0+32768)))& (0+255)
   928  0294  118A  20B1  118A   	fcall	_printf
   929                           
   930                           ;main.c: 161: _delay((unsigned long)((500)*(20000000/4000.0)));
   931  0297  300D               	movlw	13
   932  0298  00BE               	movwf	??_main+2
   933  0299  30AF               	movlw	175
   934  029A  00BD               	movwf	??_main+1
   935  029B  30C1               	movlw	193
   936  029C  00BC               	movwf	??_main
   937  029D                     u1027:	
   938  029D  0BBC               	decfsz	??_main,f
   939  029E  2A9D               	goto	u1027
   940  029F  0BBD               	decfsz	??_main+1,f
   941  02A0  2A9D               	goto	u1027
   942  02A1  0BBE               	decfsz	??_main+2,f
   943  02A2  2A9D               	goto	u1027
   944  02A3  0000               	nop
   945                           
   946                           ;main.c: 162: printf(".");
   947  02A4  307F               	movlw	(low (((STR_4+2)-__stringbase)| (0+32768)))& (0+255)
   948  02A5  118A  20B1  118A   	fcall	_printf
   949                           
   950                           ;main.c: 163: _delay((unsigned long)((500)*(20000000/4000.0)));
   951  02A8  300D               	movlw	13
   952  02A9  00BE               	movwf	??_main+2
   953  02AA  30AF               	movlw	175
   954  02AB  00BD               	movwf	??_main+1
   955  02AC  30C1               	movlw	193
   956  02AD  00BC               	movwf	??_main
   957  02AE                     u1037:	
   958  02AE  0BBC               	decfsz	??_main,f
   959  02AF  2AAE               	goto	u1037
   960  02B0  0BBD               	decfsz	??_main+1,f
   961  02B1  2AAE               	goto	u1037
   962  02B2  0BBE               	decfsz	??_main+2,f
   963  02B3  2AAE               	goto	u1037
   964  02B4  0000               	nop
   965                           
   966                           ;main.c: 165: for(int i=0; i <32;i++){
   967  02B5  1283               	bcf	3,5	;RP0=0, select bank0
   968  02B6  1303               	bcf	3,6	;RP1=0, select bank0
   969  02B7  01BF               	clrf	main@i
   970  02B8  01C0               	clrf	main@i+1
   971  02B9                     l1683:	
   972                           
   973                           ;main.c: 166: scrollDisplayLeft();
   974  02B9  118A  201C  118A   	fcall	_scrollDisplayLeft
   975                           
   976                           ;main.c: 167: _delay((unsigned long)((400)*(20000000/4000.0)));
   977  02BC  300B               	movlw	11
   978  02BD  00BE               	movwf	??_main+2
   979  02BE  3026               	movlw	38
   980  02BF  00BD               	movwf	??_main+1
   981  02C0  3066               	movlw	102
   982  02C1  00BC               	movwf	??_main
   983  02C2                     u1047:	
   984  02C2  0BBC               	decfsz	??_main,f
   985  02C3  2AC2               	goto	u1047
   986  02C4  0BBD               	decfsz	??_main+1,f
   987  02C5  2AC2               	goto	u1047
   988  02C6  0BBE               	decfsz	??_main+2,f
   989  02C7  2AC2               	goto	u1047
   990  02C8  2AC9               	nop2
   991  02C9  1283               	bcf	3,5	;RP0=0, select bank0
   992  02CA  1303               	bcf	3,6	;RP1=0, select bank0
   993  02CB  0ABF               	incf	main@i,f
   994  02CC  1903               	skipnz
   995  02CD  0AC0               	incf	main@i+1,f
   996  02CE  0840               	movf	main@i+1,w
   997  02CF  3A80               	xorlw	128
   998  02D0  00FF               	movwf	127
   999  02D1  3080               	movlw	128
  1000  02D2  027F               	subwf	127,w
  1001  02D3  1D03               	skipz
  1002  02D4  2AD7               	goto	u955
  1003  02D5  3020               	movlw	32
  1004  02D6  023F               	subwf	main@i,w
  1005  02D7                     u955:	
  1006  02D7  1C03               	skipc
  1007  02D8  2AB9               	goto	l1683
  1008                           
  1009                           ;main.c: 168: }
  1010                           ;main.c: 169: printf( "\v\x01" "DigPot Ready 2go");
  1011  02D9  3059               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1012  02DA  118A  20B1  118A   	fcall	_printf
  1013  02DD                     l1693:	
  1014                           
  1015                           ;main.c: 171: {
  1016                           ;main.c: 174: PORTD = 0x04;
  1017  02DD  3004               	movlw	4
  1018  02DE  0088               	movwf	8	;volatile
  1019                           
  1020                           ;main.c: 175: delay(counter);
  1021  02DF  085C               	movf	_counter,w	;volatile
  1022  02E0  118A  245F  118A   	fcall	_delay
  1023                           
  1024                           ;main.c: 176: PORTD = 0x08;
  1025  02E3  3008               	movlw	8
  1026  02E4  1283               	bcf	3,5	;RP0=0, select bank0
  1027  02E5  1303               	bcf	3,6	;RP1=0, select bank0
  1028  02E6  0088               	movwf	8	;volatile
  1029                           
  1030                           ;main.c: 177: delay(counter);
  1031  02E7  085C               	movf	_counter,w	;volatile
  1032  02E8  118A  245F  118A   	fcall	_delay
  1033                           
  1034                           ;main.c: 179: PORTD = 0x10;
  1035  02EB  3010               	movlw	16
  1036  02EC  1283               	bcf	3,5	;RP0=0, select bank0
  1037  02ED  1303               	bcf	3,6	;RP1=0, select bank0
  1038  02EE  0088               	movwf	8	;volatile
  1039                           
  1040                           ;main.c: 180: delay(counter);
  1041  02EF  085C               	movf	_counter,w	;volatile
  1042  02F0  118A  245F  118A   	fcall	_delay
  1043                           
  1044                           ;main.c: 181: PORTD = 0x20;
  1045  02F3  3020               	movlw	32
  1046  02F4  1283               	bcf	3,5	;RP0=0, select bank0
  1047  02F5  1303               	bcf	3,6	;RP1=0, select bank0
  1048  02F6  0088               	movwf	8	;volatile
  1049                           
  1050                           ;main.c: 182: delay(counter);
  1051  02F7  085C               	movf	_counter,w	;volatile
  1052  02F8  118A  245F  118A   	fcall	_delay
  1053                           
  1054                           ;main.c: 184: PORTD = 0x40;
  1055  02FB  3040               	movlw	64
  1056  02FC  1283               	bcf	3,5	;RP0=0, select bank0
  1057  02FD  1303               	bcf	3,6	;RP1=0, select bank0
  1058  02FE  0088               	movwf	8	;volatile
  1059                           
  1060                           ;main.c: 185: delay(counter);
  1061  02FF  085C               	movf	_counter,w	;volatile
  1062  0300  118A  245F  118A   	fcall	_delay
  1063                           
  1064                           ;main.c: 186: PORTD = 0x80;
  1065  0303  3080               	movlw	128
  1066  0304  1283               	bcf	3,5	;RP0=0, select bank0
  1067  0305  1303               	bcf	3,6	;RP1=0, select bank0
  1068  0306  0088               	movwf	8	;volatile
  1069                           
  1070                           ;main.c: 187: delay(counter);
  1071  0307  085C               	movf	_counter,w	;volatile
  1072  0308  118A  245F  118A   	fcall	_delay
  1073                           
  1074                           ;main.c: 189: PORTD = 0x40;
  1075  030B  3040               	movlw	64
  1076  030C  1283               	bcf	3,5	;RP0=0, select bank0
  1077  030D  1303               	bcf	3,6	;RP1=0, select bank0
  1078  030E  0088               	movwf	8	;volatile
  1079                           
  1080                           ;main.c: 190: delay(counter);
  1081  030F  085C               	movf	_counter,w	;volatile
  1082  0310  118A  245F  118A   	fcall	_delay
  1083                           
  1084                           ;main.c: 191: PORTD = 0x20;
  1085  0313  3020               	movlw	32
  1086  0314  1283               	bcf	3,5	;RP0=0, select bank0
  1087  0315  1303               	bcf	3,6	;RP1=0, select bank0
  1088  0316  0088               	movwf	8	;volatile
  1089                           
  1090                           ;main.c: 192: delay(counter);
  1091  0317  085C               	movf	_counter,w	;volatile
  1092  0318  118A  245F  118A   	fcall	_delay
  1093                           
  1094                           ;main.c: 194: PORTD = 0x10;
  1095  031B  3010               	movlw	16
  1096  031C  1283               	bcf	3,5	;RP0=0, select bank0
  1097  031D  1303               	bcf	3,6	;RP1=0, select bank0
  1098  031E  0088               	movwf	8	;volatile
  1099                           
  1100                           ;main.c: 195: delay(counter);
  1101  031F  085C               	movf	_counter,w	;volatile
  1102  0320  118A  245F  118A   	fcall	_delay
  1103                           
  1104                           ;main.c: 196: PORTD = 0x08;
  1105  0323  3008               	movlw	8
  1106  0324  1283               	bcf	3,5	;RP0=0, select bank0
  1107  0325  1303               	bcf	3,6	;RP1=0, select bank0
  1108  0326  0088               	movwf	8	;volatile
  1109                           
  1110                           ;main.c: 197: delay(counter);
  1111  0327  085C               	movf	_counter,w	;volatile
  1112  0328  118A  245F  118A   	fcall	_delay
  1113                           
  1114                           ;main.c: 198: if(changed){
  1115  032B  1283               	bcf	3,5	;RP0=0, select bank0
  1116  032C  1303               	bcf	3,6	;RP1=0, select bank0
  1117  032D  0855               	movf	_changed,w	;volatile
  1118  032E  1903               	btfsc	3,2
  1119  032F  2ADD               	goto	l1693
  1120                           
  1121                           ;main.c: 199: printf("\v\xC0" "Counter: %d dB",counter);
  1122  0330  085C               	movf	_counter,w	;volatile
  1123  0331  00B1               	movwf	?_printf
  1124  0332  306C               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  1125  0333  01B2               	clrf	?_printf+1
  1126  0334  118A  20B1  118A   	fcall	_printf
  1127                           
  1128                           ;main.c: 200: changed = 0;
  1129  0337  01D5               	clrf	_changed	;volatile
  1130  0338  2ADD               	goto	l1693
  1131  0339                     __end_of_main:	
  1132                           
  1133                           	psect	text1
  1134  001C                     __ptext1:	
  1135 ;; *************** function _scrollDisplayLeft *****************
  1136 ;; Defined at:
  1137 ;;		line 227 in file "i2c_lcd.c"
  1138 ;; Parameters:    Size  Location     Type
  1139 ;;		None
  1140 ;; Auto vars:     Size  Location     Type
  1141 ;;		None
  1142 ;; Return value:  Size  Location     Type
  1143 ;;                  1    wreg      void 
  1144 ;; Registers used:
  1145 ;;		wreg, status,2, status,0, pclath, cstack
  1146 ;; Tracked objects:
  1147 ;;		On entry : 0/0
  1148 ;;		On exit  : 300/0
  1149 ;;		Unchanged: 0/0
  1150 ;; Data sizes:     COMMON   BANK0   BANK1
  1151 ;;      Params:         0       0       0
  1152 ;;      Locals:         0       0       0
  1153 ;;      Temps:          0       0       0
  1154 ;;      Totals:         0       0       0
  1155 ;;Total ram usage:        0 bytes
  1156 ;; Hardware stack levels used:    1
  1157 ;; Hardware stack levels required when called:    6
  1158 ;; This function calls:
  1159 ;;		_lcd_write_byte
  1160 ;; This function is called by:
  1161 ;;		_main
  1162 ;; This function uses a non-reentrant model
  1163 ;;
  1164                           
  1165                           
  1166                           ;psect for function _scrollDisplayLeft
  1167  001C                     _scrollDisplayLeft:	
  1168                           
  1169                           ;i2c_lcd.c: 228: RS = 0;
  1170                           
  1171                           ;incstack = 0
  1172                           ; Regs used in _scrollDisplayLeft: [wreg+status,2+status,0+pclath+cstack]
  1173  001C  1283               	bcf	3,5	;RP0=0, select bank0
  1174  001D  3018               	movlw	24
  1175  001E  1303               	bcf	3,6	;RP1=0, select bank0
  1176  001F  01D4               	clrf	_RS
  1177                           
  1178                           ;i2c_lcd.c: 229: lcd_write_byte(0x10 | 0x08 | 0x00 );
  1179  0020  2963               	ljmp	_lcd_write_byte
  1180  0021                     __end_of_scrollDisplayLeft:	
  1181  0021                     __ptext17:	
  1182 ;; *************** function _I2C_Start *****************
  1183 ;; Defined at:
  1184 ;;		line 15 in file "i2c_lcd.c"
  1185 ;; Parameters:    Size  Location     Type
  1186 ;;		None
  1187 ;; Auto vars:     Size  Location     Type
  1188 ;;		None
  1189 ;; Return value:  Size  Location     Type
  1190 ;;                  1    wreg      void 
  1191 ;; Registers used:
  1192 ;;		wreg, status,2, status,0, pclath, cstack
  1193 ;; Tracked objects:
  1194 ;;		On entry : B00/100
  1195 ;;		On exit  : 300/0
  1196 ;;		Unchanged: 0/0
  1197 ;; Data sizes:     COMMON   BANK0   BANK1
  1198 ;;      Params:         0       0       0
  1199 ;;      Locals:         0       0       0
  1200 ;;      Temps:          0       0       0
  1201 ;;      Totals:         0       0       0
  1202 ;;Total ram usage:        0 bytes
  1203 ;; Hardware stack levels used:    1
  1204 ;; Hardware stack levels required when called:    3
  1205 ;; This function calls:
  1206 ;;		_is_I2C_idle
  1207 ;; This function is called by:
  1208 ;;		_main
  1209 ;; This function uses a non-reentrant model
  1210 ;;
  1211                           
  1212                           
  1213                           ;psect for function _I2C_Start
  1214  0021                     _I2C_Start:	
  1215                           
  1216                           ;i2c_lcd.c: 17: is_I2C_idle();
  1217                           
  1218                           ;incstack = 0
  1219                           ; Regs used in _I2C_Start: [wreg+status,2+status,0+pclath+cstack]
  1220  0021  21AD  118A         	fcall	_is_I2C_idle
  1221                           
  1222                           ;i2c_lcd.c: 18: SEN = 1;
  1223  0023  1683               	bsf	3,5	;RP0=1, select bank1
  1224  0024  1411               	bsf	17,0	;volatile
  1225                           
  1226                           ;i2c_lcd.c: 19: is_I2C_idle();
  1227  0025  21AD               	fcall	_is_I2C_idle
  1228                           
  1229                           ;i2c_lcd.c: 20: SSPBUF = 0x4E;
  1230  0026  304E               	movlw	78
  1231  0027  0093               	movwf	19	;volatile
  1232  0028  0008               	return
  1233  0029                     __end_of_I2C_Start:	
  1234  0029                     __ptext12:	
  1235 ;; *************** function _LCD_Write_Str *****************
  1236 ;; Defined at:
  1237 ;;		line 243 in file "i2c_lcd.c"
  1238 ;; Parameters:    Size  Location     Type
  1239 ;;  message         1    wreg     PTR const unsigned char 
  1240 ;;		 -> STR_3(24), 
  1241 ;; Auto vars:     Size  Location     Type
  1242 ;;  message         1   14[BANK0 ] PTR const unsigned char 
  1243 ;;		 -> STR_3(24), 
  1244 ;;  message_ptr     1   15[BANK0 ] PTR unsigned char 
  1245 ;;		 -> STR_3(24), 
  1246 ;; Return value:  Size  Location     Type
  1247 ;;                  1    wreg      void 
  1248 ;; Registers used:
  1249 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1250 ;; Tracked objects:
  1251 ;;		On entry : 0/0
  1252 ;;		On exit  : 300/0
  1253 ;;		Unchanged: 0/0
  1254 ;; Data sizes:     COMMON   BANK0   BANK1
  1255 ;;      Params:         0       0       0
  1256 ;;      Locals:         0       2       0
  1257 ;;      Temps:          0       0       0
  1258 ;;      Totals:         0       2       0
  1259 ;;Total ram usage:        2 bytes
  1260 ;; Hardware stack levels used:    1
  1261 ;; Hardware stack levels required when called:    6
  1262 ;; This function calls:
  1263 ;;		_lcd_write_byte
  1264 ;; This function is called by:
  1265 ;;		_main
  1266 ;; This function uses a non-reentrant model
  1267 ;;
  1268                           
  1269                           
  1270                           ;psect for function _LCD_Write_Str
  1271  0029                     _LCD_Write_Str:	
  1272                           
  1273                           ;incstack = 0
  1274                           ; Regs used in _LCD_Write_Str: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1275                           ;LCD_Write_Str@message stored from wreg
  1276  0029  1283               	bcf	3,5	;RP0=0, select bank0
  1277  002A  1303               	bcf	3,6	;RP1=0, select bank0
  1278  002B  00AE               	movwf	LCD_Write_Str@message
  1279                           
  1280                           ;i2c_lcd.c: 245: unsigned char *message_ptr = (unsigned char *) message;
  1281  002C  00AF               	movwf	LCD_Write_Str@message_ptr
  1282  002D                     l1591:	
  1283                           ;i2c_lcd.c: 247: while (*message_ptr)
  1284                           
  1285  002D  082F               	movf	LCD_Write_Str@message_ptr,w
  1286  002E  0084               	movwf	4
  1287  002F  118A  2339  118A   	fcall	stringdir
  1288  0032  3A00               	xorlw	0
  1289  0033  1903               	btfsc	3,2
  1290  0034  0008               	return
  1291                           
  1292                           ;i2c_lcd.c: 248: lcd_write_byte((unsigned char) (*message_ptr++));
  1293  0035  082F               	movf	LCD_Write_Str@message_ptr,w
  1294  0036  0084               	movwf	4
  1295  0037  118A  2339  118A   	fcall	stringdir
  1296  003A  2163  118A         	fcall	_lcd_write_byte
  1297  003C  0AAF               	incf	LCD_Write_Str@message_ptr,f
  1298  003D  282D               	goto	l1591
  1299  003E                     __end_of_LCD_Write_Str:	
  1300  003E                     __ptext7:	
  1301 ;; *************** function _lcd_write_cmd *****************
  1302 ;; Defined at:
  1303 ;;		line 74 in file "i2c_lcd.c"
  1304 ;; Parameters:    Size  Location     Type
  1305 ;;  cmd             1    wreg     unsigned char 
  1306 ;; Auto vars:     Size  Location     Type
  1307 ;;  cmd             1   12[BANK0 ] unsigned char 
  1308 ;;  shadow          1   13[BANK0 ] unsigned char 
  1309 ;; Return value:  Size  Location     Type
  1310 ;;                  1    wreg      void 
  1311 ;; Registers used:
  1312 ;;		wreg, status,2, status,0, pclath, cstack
  1313 ;; Tracked objects:
  1314 ;;		On entry : 300/0
  1315 ;;		On exit  : 300/0
  1316 ;;		Unchanged: 0/0
  1317 ;; Data sizes:     COMMON   BANK0   BANK1
  1318 ;;      Params:         0       0       0
  1319 ;;      Locals:         0       2       0
  1320 ;;      Temps:          0       0       0
  1321 ;;      Totals:         0       2       0
  1322 ;;Total ram usage:        2 bytes
  1323 ;; Hardware stack levels used:    1
  1324 ;; Hardware stack levels required when called:    5
  1325 ;; This function calls:
  1326 ;;		_Write_I2C
  1327 ;;		_strobe
  1328 ;; This function is called by:
  1329 ;;		_main
  1330 ;; This function uses a non-reentrant model
  1331 ;;
  1332                           
  1333                           
  1334                           ;psect for function _lcd_write_cmd
  1335  003E                     _lcd_write_cmd:	
  1336                           
  1337                           ;incstack = 0
  1338                           ; Regs used in _lcd_write_cmd: [wreg+status,2+status,0+pclath+cstack]
  1339                           ;lcd_write_cmd@cmd stored from wreg
  1340  003E  00AC               	movwf	lcd_write_cmd@cmd
  1341                           
  1342                           ;i2c_lcd.c: 76: uint8_t shadow;
  1343                           ;i2c_lcd.c: 78: shadow = (cmd & 0xF0);
  1344  003F  00AD               	movwf	lcd_write_cmd@shadow
  1345  0040  30F0               	movlw	240
  1346  0041  05AD               	andwf	lcd_write_cmd@shadow,f
  1347                           
  1348                           ;i2c_lcd.c: 79: Write_I2C(shadow);
  1349  0042  082D               	movf	lcd_write_cmd@shadow,w
  1350  0043  217D  118A         	fcall	_Write_I2C
  1351                           
  1352                           ;i2c_lcd.c: 80: strobe(shadow);
  1353  0045  082D               	movf	lcd_write_cmd@shadow,w
  1354  0046  2194  118A         	fcall	_strobe
  1355                           
  1356                           ;i2c_lcd.c: 82: shadow = (cmd << 4);
  1357  0048  0E2C               	swapf	lcd_write_cmd@cmd,w
  1358  0049  39F0               	andlw	240
  1359  004A  00AD               	movwf	lcd_write_cmd@shadow
  1360                           
  1361                           ;i2c_lcd.c: 83: Write_I2C(shadow);
  1362  004B  217D  118A         	fcall	_Write_I2C
  1363                           
  1364                           ;i2c_lcd.c: 84: strobe(shadow);
  1365  004D  082D               	movf	lcd_write_cmd@shadow,w
  1366  004E  2994               	ljmp	_strobe
  1367  004F                     __end_of_lcd_write_cmd:	
  1368  004F                     __ptext13:	
  1369 ;; *************** function _LCD_Init *****************
  1370 ;; Defined at:
  1371 ;;		line 160 in file "i2c_lcd.c"
  1372 ;; Parameters:    Size  Location     Type
  1373 ;;		None
  1374 ;; Auto vars:     Size  Location     Type
  1375 ;;		None
  1376 ;; Return value:  Size  Location     Type
  1377 ;;                  1    wreg      void 
  1378 ;; Registers used:
  1379 ;;		wreg, status,2, status,0, pclath, cstack
  1380 ;; Tracked objects:
  1381 ;;		On entry : 300/0
  1382 ;;		On exit  : 300/0
  1383 ;;		Unchanged: 0/0
  1384 ;; Data sizes:     COMMON   BANK0   BANK1
  1385 ;;      Params:         0       0       0
  1386 ;;      Locals:         0       0       0
  1387 ;;      Temps:          0       3       0
  1388 ;;      Totals:         0       3       0
  1389 ;;Total ram usage:        3 bytes
  1390 ;; Hardware stack levels used:    1
  1391 ;; Hardware stack levels required when called:    6
  1392 ;; This function calls:
  1393 ;;		_Write_I2C
  1394 ;;		_lcd_write_byte
  1395 ;;		_strobe
  1396 ;; This function is called by:
  1397 ;;		_main
  1398 ;; This function uses a non-reentrant model
  1399 ;;
  1400                           
  1401                           
  1402                           ;psect for function _LCD_Init
  1403  004F                     _LCD_Init:	
  1404                           
  1405                           ;i2c_lcd.c: 162: _delay((unsigned long)((50)*(20000000/4000.0)));
  1406                           
  1407                           ;incstack = 0
  1408                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  1409  004F  3002               	movlw	2
  1410  0050  00B0               	movwf	??_LCD_Init+2
  1411  0051  3045               	movlw	69
  1412  0052  00AF               	movwf	??_LCD_Init+1
  1413  0053  30A9               	movlw	169
  1414  0054  00AE               	movwf	??_LCD_Init
  1415  0055                     u1077:	
  1416  0055  0BAE               	decfsz	??_LCD_Init,f
  1417  0056  2855               	goto	u1077
  1418  0057  0BAF               	decfsz	??_LCD_Init+1,f
  1419  0058  2855               	goto	u1077
  1420  0059  0BB0               	decfsz	??_LCD_Init+2,f
  1421  005A  2855               	goto	u1077
  1422  005B  285C               	nop2
  1423                           
  1424                           ;i2c_lcd.c: 164: Write_I2C(0x00);
  1425  005C  3000               	movlw	0
  1426  005D  217D  118A         	fcall	_Write_I2C
  1427                           
  1428                           ;i2c_lcd.c: 165: _delay((unsigned long)((20)*(20000000/4000.0)));
  1429  005F  3082               	movlw	130
  1430  0060  00AF               	movwf	??_LCD_Init+1
  1431  0061  30DD               	movlw	221
  1432  0062  00AE               	movwf	??_LCD_Init
  1433  0063                     u1087:	
  1434  0063  0BAE               	decfsz	??_LCD_Init,f
  1435  0064  2863               	goto	u1087
  1436  0065  0BAF               	decfsz	??_LCD_Init+1,f
  1437  0066  2863               	goto	u1087
  1438  0067  2868               	nop2
  1439                           
  1440                           ;i2c_lcd.c: 167: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1441  0068  301A               	movlw	26
  1442  0069  1283               	bcf	3,5	;RP0=0, select bank0
  1443  006A  1303               	bcf	3,6	;RP1=0, select bank0
  1444  006B  00B0               	movwf	??_LCD_Init+2
  1445  006C  305E               	movlw	94
  1446  006D  00AF               	movwf	??_LCD_Init+1
  1447  006E  3086               	movlw	134
  1448  006F  00AE               	movwf	??_LCD_Init
  1449  0070                     u1097:	
  1450  0070  0BAE               	decfsz	??_LCD_Init,f
  1451  0071  2870               	goto	u1097
  1452  0072  0BAF               	decfsz	??_LCD_Init+1,f
  1453  0073  2870               	goto	u1097
  1454  0074  0BB0               	decfsz	??_LCD_Init+2,f
  1455  0075  2870               	goto	u1097
  1456  0076  0000               	nop
  1457                           
  1458                           ;i2c_lcd.c: 168: Write_I2C(0b00110000);
  1459  0077  3030               	movlw	48
  1460  0078  217D  118A         	fcall	_Write_I2C
  1461                           
  1462                           ;i2c_lcd.c: 169: strobe(0b00110000);
  1463  007A  3030               	movlw	48
  1464  007B  2194  118A         	fcall	_strobe
  1465                           
  1466                           ;i2c_lcd.c: 170: _delay((unsigned long)((5)*(20000000/4000000.0)));
  1467  007D  3008               	movlw	8
  1468  007E  00AE               	movwf	??_LCD_Init
  1469  007F                     u1107:	
  1470  007F  0BAE               	decfsz	??_LCD_Init,f
  1471  0080  287F               	goto	u1107
  1472                           
  1473                           ;i2c_lcd.c: 172: strobe(0b00110000);
  1474  0081  3030               	movlw	48
  1475  0082  2194  118A         	fcall	_strobe
  1476                           
  1477                           ;i2c_lcd.c: 173: _delay((unsigned long)((5)*(20000000/4000.0)));
  1478  0084  3021               	movlw	33
  1479  0085  00AF               	movwf	??_LCD_Init+1
  1480  0086  3076               	movlw	118
  1481  0087  00AE               	movwf	??_LCD_Init
  1482  0088                     u1117:	
  1483  0088  0BAE               	decfsz	??_LCD_Init,f
  1484  0089  2888               	goto	u1117
  1485  008A  0BAF               	decfsz	??_LCD_Init+1,f
  1486  008B  2888               	goto	u1117
  1487  008C  0000               	nop
  1488                           
  1489                           ;i2c_lcd.c: 175: strobe(0b00110000);
  1490  008D  3030               	movlw	48
  1491  008E  2194  118A         	fcall	_strobe
  1492                           
  1493                           ;i2c_lcd.c: 176: _delay((unsigned long)((1)*(20000000/4000.0)));
  1494  0090  3007               	movlw	7
  1495  0091  00AF               	movwf	??_LCD_Init+1
  1496  0092  307D               	movlw	125
  1497  0093  00AE               	movwf	??_LCD_Init
  1498  0094                     u1127:	
  1499  0094  0BAE               	decfsz	??_LCD_Init,f
  1500  0095  2894               	goto	u1127
  1501  0096  0BAF               	decfsz	??_LCD_Init+1,f
  1502  0097  2894               	goto	u1127
  1503                           
  1504                           ;i2c_lcd.c: 178: Write_I2C(0b00100000);
  1505  0098  3020               	movlw	32
  1506  0099  217D  118A         	fcall	_Write_I2C
  1507                           
  1508                           ;i2c_lcd.c: 179: strobe(0b00100000);
  1509  009B  3020               	movlw	32
  1510  009C  2194  118A         	fcall	_strobe
  1511                           
  1512                           ;i2c_lcd.c: 180: _delay((unsigned long)((1)*(20000000/4000.0)));
  1513  009E  3007               	movlw	7
  1514  009F  00AF               	movwf	??_LCD_Init+1
  1515  00A0  307D               	movlw	125
  1516  00A1  00AE               	movwf	??_LCD_Init
  1517  00A2                     u1137:	
  1518  00A2  0BAE               	decfsz	??_LCD_Init,f
  1519  00A3  28A2               	goto	u1137
  1520  00A4  0BAF               	decfsz	??_LCD_Init+1,f
  1521  00A5  28A2               	goto	u1137
  1522                           
  1523                           ;i2c_lcd.c: 186: lcd_write_byte(0x28);
  1524  00A6  3028               	movlw	40
  1525  00A7  2163  118A         	fcall	_lcd_write_byte
  1526                           
  1527                           ;i2c_lcd.c: 187: lcd_write_byte(0x0C);
  1528  00A9  300C               	movlw	12
  1529  00AA  2163  118A         	fcall	_lcd_write_byte
  1530                           
  1531                           ;i2c_lcd.c: 188: lcd_write_byte(6);
  1532  00AC  3006               	movlw	6
  1533  00AD  2163  118A         	fcall	_lcd_write_byte
  1534                           
  1535                           ;i2c_lcd.c: 190: lcd_write_byte(0x02);
  1536  00AF  3002               	movlw	2
  1537  00B0  2963               	ljmp	_lcd_write_byte
  1538  00B1                     __end_of_LCD_Init:	
  1539  00B1                     __ptext2:	
  1540 ;; *************** function _printf *****************
  1541 ;; Defined at:
  1542 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  1543 ;; Parameters:    Size  Location     Type
  1544 ;;  f               1    wreg     PTR const unsigned char 
  1545 ;;		 -> STR_10(17), STR_9(19), STR_8(2), STR_7(2), 
  1546 ;;		 -> STR_6(2), STR_5(2), STR_4(4), STR_2(31), 
  1547 ;;		 -> STR_1(23), 
  1548 ;; Auto vars:     Size  Location     Type
  1549 ;;  f               1   26[BANK0 ] PTR const unsigned char 
  1550 ;;		 -> STR_10(17), STR_9(19), STR_8(2), STR_7(2), 
  1551 ;;		 -> STR_6(2), STR_5(2), STR_4(4), STR_2(31), 
  1552 ;;		 -> STR_1(23), 
  1553 ;;  tmpval          4    0        struct .
  1554 ;;  val             2   24[BANK0 ] unsigned int 
  1555 ;;  cp              2    0        PTR const unsigned char 
  1556 ;;  len             2    0        unsigned int 
  1557 ;;  c               1   27[BANK0 ] char 
  1558 ;;  prec            1   23[BANK0 ] char 
  1559 ;;  flag            1   22[BANK0 ] unsigned char 
  1560 ;;  ap              1   21[BANK0 ] PTR void [1]
  1561 ;;		 -> ?_printf(2), 
  1562 ;; Return value:  Size  Location     Type
  1563 ;;                  2   17[BANK0 ] int 
  1564 ;; Registers used:
  1565 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1566 ;; Tracked objects:
  1567 ;;		On entry : 0/0
  1568 ;;		On exit  : 300/0
  1569 ;;		Unchanged: 0/0
  1570 ;; Data sizes:     COMMON   BANK0   BANK1
  1571 ;;      Params:         0       2       0
  1572 ;;      Locals:         0       7       0
  1573 ;;      Temps:          0       2       0
  1574 ;;      Totals:         0      11       0
  1575 ;;Total ram usage:       11 bytes
  1576 ;; Hardware stack levels used:    1
  1577 ;; Hardware stack levels required when called:    7
  1578 ;; This function calls:
  1579 ;;		___lwdiv
  1580 ;;		___lwmod
  1581 ;;		_putch
  1582 ;; This function is called by:
  1583 ;;		_main
  1584 ;; This function uses a non-reentrant model
  1585 ;;
  1586                           
  1587                           
  1588                           ;psect for function _printf
  1589  00B1                     _printf:	
  1590                           
  1591                           ;incstack = 0
  1592 ;; using string table level
  1593                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1594                           ;printf@f stored from wreg
  1595  00B1  1283               	bcf	3,5	;RP0=0, select bank0
  1596  00B2  1303               	bcf	3,6	;RP1=0, select bank0
  1597  00B3  00BA               	movwf	printf@f
  1598                           
  1599                           ;doprnt.c: 466: va_list ap;
  1600                           ;doprnt.c: 499: signed char c;
  1601                           ;doprnt.c: 506: signed char prec;
  1602                           ;doprnt.c: 508: unsigned char flag;
  1603                           ;doprnt.c: 523: union {
  1604                           ;doprnt.c: 524: unsigned long vd;
  1605                           ;doprnt.c: 525: double integ;
  1606                           ;doprnt.c: 526: } tmpval;
  1607                           ;doprnt.c: 528: unsigned int val;
  1608                           ;doprnt.c: 529: unsigned len;
  1609                           ;doprnt.c: 530: const char * cp;
  1610                           ;doprnt.c: 533: *ap = __va_start();
  1611  00B4  3031               	movlw	(low (?_printf| 0))& (0+255)
  1612  00B5  00B5               	movwf	printf@ap
  1613  00B6                     l1569:	
  1614                           ;doprnt.c: 536: while(c = *f++) {
  1615                           
  1616  00B6  083A               	movf	printf@f,w
  1617  00B7  0ABA               	incf	printf@f,f
  1618  00B8  0084               	movwf	4
  1619  00B9  118A  2339  118A   	fcall	stringdir
  1620  00BC  00BB               	movwf	printf@c
  1621  00BD  083B               	movf	printf@c,w
  1622  00BE  1903               	btfsc	3,2
  1623  00BF  0008               	return
  1624                           
  1625                           ;doprnt.c: 538: if(c != '%')
  1626  00C0  3A25               	xorlw	37
  1627  00C1  1903               	btfsc	3,2
  1628  00C2  28C7               	goto	l1529
  1629                           
  1630                           ;doprnt.c: 540: {
  1631                           ;doprnt.c: 541: (putch(c) );
  1632  00C3  083B               	movf	printf@c,w
  1633  00C4  2135  118A         	fcall	_putch
  1634                           
  1635                           ;doprnt.c: 542: continue;
  1636  00C6  28B6               	goto	l1569
  1637  00C7                     l1529:	
  1638                           
  1639                           ;doprnt.c: 543: }
  1640                           ;doprnt.c: 548: flag = 0;
  1641  00C7  01B6               	clrf	printf@flag
  1642                           
  1643                           ;doprnt.c: 635: switch(c = *f++) {
  1644  00C8  083A               	movf	printf@f,w
  1645  00C9  0ABA               	incf	printf@f,f
  1646  00CA  0084               	movwf	4
  1647  00CB  118A  2339  118A   	fcall	stringdir
  1648  00CE  00BB               	movwf	printf@c
  1649                           
  1650                           ; Switch size 1, requested type "speed"
  1651                           ; Number of cases is 3, Range of values is 0 to 105
  1652                           ; switch strategies available:
  1653                           ; Name         Instructions Cycles
  1654                           ; simple_byte           10     6 (average)
  1655                           ; direct_byte          219     7 (fixed)
  1656                           ; jumptable            260     6 (fixed)
  1657                           ;	Chosen strategy is simple_byte
  1658  00CF  3A00               	xorlw	0	; case 0
  1659  00D0  1903               	skipnz
  1660  00D1  2934               	goto	l330
  1661  00D2  3A64               	xorlw	100	; case 100
  1662  00D3  1903               	skipnz
  1663  00D4  28D9               	goto	l1535
  1664  00D5  3A0D               	xorlw	13	; case 105
  1665  00D6  1903               	skipnz
  1666  00D7  28D9               	goto	l1535
  1667  00D8  28B6               	goto	l1569
  1668  00D9                     l1535:	
  1669                           
  1670                           ;doprnt.c: 1253: {
  1671                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1672  00D9  0835               	movf	printf@ap,w
  1673  00DA  0084               	movwf	4
  1674  00DB  1383               	bcf	3,7	;select IRP bank0
  1675  00DC  0800               	movf	0,w
  1676  00DD  00B8               	movwf	printf@val
  1677  00DE  0A84               	incf	4,f
  1678  00DF  0800               	movf	0,w
  1679  00E0  00B9               	movwf	printf@val+1
  1680  00E1  0AB5               	incf	printf@ap,f
  1681  00E2  0AB5               	incf	printf@ap,f
  1682                           
  1683                           ;doprnt.c: 1261: if((int)val < 0) {
  1684  00E3  1FB9               	btfss	printf@val+1,7
  1685  00E4  28EC               	goto	l1545
  1686                           
  1687                           ;doprnt.c: 1262: flag |= 0x03;
  1688  00E5  3003               	movlw	3
  1689  00E6  04B6               	iorwf	printf@flag,f
  1690                           
  1691                           ;doprnt.c: 1263: val = -val;
  1692  00E7  09B8               	comf	printf@val,f
  1693  00E8  09B9               	comf	printf@val+1,f
  1694  00E9  0AB8               	incf	printf@val,f
  1695  00EA  1903               	skipnz
  1696  00EB  0AB9               	incf	printf@val+1,f
  1697  00EC                     l1545:	
  1698                           
  1699                           ;doprnt.c: 1264: }
  1700                           ;doprnt.c: 1266: }
  1701                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1702  00EC  01BB               	clrf	printf@c
  1703  00ED  0ABB               	incf	printf@c,f
  1704  00EE                     l1551:	
  1705                           
  1706                           ;doprnt.c: 1306: if(val < dpowers[c])
  1707  00EE  1003               	clrc
  1708  00EF  0D3B               	rlf	printf@c,w
  1709  00F0  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1710  00F1  0084               	movwf	4
  1711  00F2  118A  2339  118A   	fcall	stringdir
  1712  00F5  00B3               	movwf	??_printf
  1713  00F6  118A  2339  118A   	fcall	stringdir
  1714  00F9  00B4               	movwf	??_printf+1
  1715  00FA  0239               	subwf	printf@val+1,w
  1716  00FB  1D03               	skipz
  1717  00FC  28FF               	goto	u785
  1718  00FD  0833               	movf	??_printf,w
  1719  00FE  0238               	subwf	printf@val,w
  1720  00FF                     u785:	
  1721  00FF  1C03               	btfss	3,0
  1722  0100  2906               	goto	l1559
  1723  0101  3005               	movlw	5
  1724  0102  0ABB               	incf	printf@c,f
  1725  0103  063B               	xorwf	printf@c,w
  1726  0104  1D03               	btfss	3,2
  1727  0105  28EE               	goto	l1551
  1728  0106                     l1559:	
  1729                           
  1730                           ;doprnt.c: 1422: {
  1731                           ;doprnt.c: 1438: if(flag & 0x03)
  1732  0106  0836               	movf	printf@flag,w
  1733  0107  3903               	andlw	3
  1734  0108  1903               	btfsc	3,2
  1735  0109  290D               	goto	l1563
  1736                           
  1737                           ;doprnt.c: 1439: (putch('-') );
  1738  010A  302D               	movlw	45
  1739  010B  2135  118A         	fcall	_putch
  1740  010D                     l1563:	
  1741                           
  1742                           ;doprnt.c: 1469: }
  1743                           ;doprnt.c: 1472: prec = c;
  1744  010D  083B               	movf	printf@c,w
  1745  010E  00B7               	movwf	printf@prec
  1746                           
  1747                           ;doprnt.c: 1474: while(prec--) {
  1748  010F  2930               	goto	l1567
  1749  0110                     l1565:	
  1750                           
  1751                           ;doprnt.c: 1478: {
  1752                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1753  0110  300A               	movlw	10
  1754  0111  00AA               	movwf	___lwmod@divisor
  1755  0112  01AB               	clrf	___lwmod@divisor+1
  1756  0113  1003               	clrc
  1757  0114  0D37               	rlf	printf@prec,w
  1758  0115  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1759  0116  0084               	movwf	4
  1760  0117  118A  2339  118A   	fcall	stringdir
  1761  011A  00A3               	movwf	___lwdiv@divisor
  1762  011B  118A  2339  118A   	fcall	stringdir
  1763  011E  00A4               	movwf	___lwdiv@divisor+1
  1764  011F  0839               	movf	printf@val+1,w
  1765  0120  00A6               	movwf	___lwdiv@dividend+1
  1766  0121  0838               	movf	printf@val,w
  1767  0122  00A5               	movwf	___lwdiv@dividend
  1768  0123  21C4  118A         	fcall	___lwdiv
  1769  0125  0824               	movf	?___lwdiv+1,w
  1770  0126  00AD               	movwf	___lwmod@dividend+1
  1771  0127  0823               	movf	?___lwdiv,w
  1772  0128  00AC               	movwf	___lwmod@dividend
  1773  0129  21EE  118A         	fcall	___lwmod
  1774  012B  082A               	movf	?___lwmod,w
  1775  012C  3E30               	addlw	48
  1776  012D  00BB               	movwf	printf@c
  1777                           
  1778                           ;doprnt.c: 1523: }
  1779                           ;doprnt.c: 1524: (putch(c) );
  1780  012E  2135  118A         	fcall	_putch
  1781  0130                     l1567:	
  1782  0130  03B7               	decf	printf@prec,f
  1783  0131  0F37               	incfsz	printf@prec,w
  1784  0132  2910               	goto	l1565
  1785  0133  28B6               	goto	l1569
  1786  0134                     l330:	
  1787  0134  0008               	return
  1788  0135                     __end_of_printf:	
  1789  0135                     __ptext3:	
  1790 ;; *************** function _putch *****************
  1791 ;; Defined at:
  1792 ;;		line 92 in file "i2c_lcd.c"
  1793 ;; Parameters:    Size  Location     Type
  1794 ;;  data            1    wreg     unsigned char 
  1795 ;; Auto vars:     Size  Location     Type
  1796 ;;  data            1   16[BANK0 ] unsigned char 
  1797 ;; Return value:  Size  Location     Type
  1798 ;;                  1    wreg      void 
  1799 ;; Registers used:
  1800 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1801 ;; Tracked objects:
  1802 ;;		On entry : 300/0
  1803 ;;		On exit  : 300/0
  1804 ;;		Unchanged: 0/0
  1805 ;; Data sizes:     COMMON   BANK0   BANK1
  1806 ;;      Params:         0       0       0
  1807 ;;      Locals:         0       1       0
  1808 ;;      Temps:          0       2       0
  1809 ;;      Totals:         0       3       0
  1810 ;;Total ram usage:        3 bytes
  1811 ;; Hardware stack levels used:    1
  1812 ;; Hardware stack levels required when called:    6
  1813 ;; This function calls:
  1814 ;;		_EUSART_Write
  1815 ;;		_lcd_write_byte
  1816 ;; This function is called by:
  1817 ;;		_printf
  1818 ;; This function uses a non-reentrant model
  1819 ;;
  1820                           
  1821                           
  1822                           ;psect for function _putch
  1823  0135                     _putch:	
  1824                           
  1825                           ;incstack = 0
  1826                           ; Regs used in _putch: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1827                           ;putch@data stored from wreg
  1828  0135  00B0               	movwf	putch@data
  1829                           
  1830                           ;i2c_lcd.c: 94: if(data == '\v')
  1831  0136  3A0B               	xorlw	11
  1832  0137  1D03               	btfss	3,2
  1833  0138  293B               	goto	l1359
  1834                           
  1835                           ;i2c_lcd.c: 95: {
  1836                           ;i2c_lcd.c: 96: RS = 0;
  1837  0139  01D4               	clrf	_RS
  1838  013A  0008               	return
  1839  013B                     l1359:	
  1840  013B  3008               	movlw	8
  1841  013C  0630               	xorwf	putch@data,w
  1842  013D  1D03               	btfss	3,2
  1843  013E  2942               	goto	l1363
  1844                           
  1845                           ;i2c_lcd.c: 99: uart = 1;
  1846  013F  01DA               	clrf	_uart
  1847  0140  0ADA               	incf	_uart,f
  1848                           
  1849                           ;i2c_lcd.c: 100: return;
  1850  0141  0008               	return
  1851  0142                     l1363:	
  1852                           
  1853                           ;i2c_lcd.c: 101: }
  1854                           ;i2c_lcd.c: 102: if(uart == 1){
  1855  0142  0B5A               	decfsz	_uart,w
  1856  0143  2949               	goto	l1371
  1857                           
  1858                           ;i2c_lcd.c: 103: EUSART_Write(data);
  1859  0144  0830               	movf	putch@data,w
  1860  0145  2212               	fcall	_EUSART_Write
  1861                           
  1862                           ;i2c_lcd.c: 104: uart = 0;
  1863  0146  1283               	bcf	3,5	;RP0=0, select bank0
  1864  0147  01DA               	clrf	_uart
  1865  0148  0008               	return
  1866  0149                     l1371:	
  1867                           
  1868                           ;i2c_lcd.c: 106: }
  1869                           ;i2c_lcd.c: 107: lcd_write_byte(data);
  1870  0149  0830               	movf	putch@data,w
  1871  014A  2163  118A         	fcall	_lcd_write_byte
  1872                           
  1873                           ;i2c_lcd.c: 108: if(!RS)
  1874  014C  0854               	movf	_RS,w
  1875  014D  1D03               	btfss	3,2
  1876  014E  295E               	goto	l1381
  1877                           
  1878                           ;i2c_lcd.c: 109: {
  1879                           ;i2c_lcd.c: 110: if ((data >= 0b00000001) && (data <= 0b00000011))
  1880  014F  0830               	movf	putch@data,w
  1881  0150  1903               	btfsc	3,2
  1882  0151  295E               	goto	l1381
  1883  0152  3004               	movlw	4
  1884  0153  0230               	subwf	putch@data,w
  1885  0154  1803               	skipnc
  1886  0155  295E               	goto	l1381
  1887                           
  1888                           ;i2c_lcd.c: 111: _delay((unsigned long)((1.64)*(20000000/4000.0)));
  1889  0156  300B               	movlw	11
  1890  0157  00AF               	movwf	??_putch+1
  1891  0158  30A5               	movlw	165
  1892  0159  00AE               	movwf	??_putch
  1893  015A                     u1057:	
  1894  015A  0BAE               	decfsz	??_putch,f
  1895  015B  295A               	goto	u1057
  1896  015C  0BAF               	decfsz	??_putch+1,f
  1897  015D  295A               	goto	u1057
  1898  015E                     l1381:	
  1899                           
  1900                           ;i2c_lcd.c: 112: }
  1901                           ;i2c_lcd.c: 113: RS = 1;
  1902  015E  1283               	bcf	3,5	;RP0=0, select bank0
  1903  015F  1303               	bcf	3,6	;RP1=0, select bank0
  1904  0160  01D4               	clrf	_RS
  1905  0161  0AD4               	incf	_RS,f
  1906  0162  0008               	return
  1907  0163                     __end_of_putch:	
  1908  0163                     __ptext14:	
  1909 ;; *************** function _lcd_write_byte *****************
  1910 ;; Defined at:
  1911 ;;		line 44 in file "i2c_lcd.c"
  1912 ;; Parameters:    Size  Location     Type
  1913 ;;  data            1    wreg     unsigned char 
  1914 ;; Auto vars:     Size  Location     Type
  1915 ;;  data            1   12[BANK0 ] unsigned char 
  1916 ;;  shadow          1   13[BANK0 ] unsigned char 
  1917 ;; Return value:  Size  Location     Type
  1918 ;;                  1    wreg      void 
  1919 ;; Registers used:
  1920 ;;		wreg, status,2, status,0, pclath, cstack
  1921 ;; Tracked objects:
  1922 ;;		On entry : 0/0
  1923 ;;		On exit  : 300/0
  1924 ;;		Unchanged: 0/0
  1925 ;; Data sizes:     COMMON   BANK0   BANK1
  1926 ;;      Params:         0       0       0
  1927 ;;      Locals:         0       2       0
  1928 ;;      Temps:          0       0       0
  1929 ;;      Totals:         0       2       0
  1930 ;;Total ram usage:        2 bytes
  1931 ;; Hardware stack levels used:    1
  1932 ;; Hardware stack levels required when called:    5
  1933 ;; This function calls:
  1934 ;;		_Write_I2C
  1935 ;;		_strobe
  1936 ;; This function is called by:
  1937 ;;		_putch
  1938 ;;		_LCD_Init
  1939 ;;		_scrollDisplayLeft
  1940 ;;		_LCD_Write_Str
  1941 ;; This function uses a non-reentrant model
  1942 ;;
  1943                           
  1944                           
  1945                           ;psect for function _lcd_write_byte
  1946  0163                     _lcd_write_byte:	
  1947                           
  1948                           ;incstack = 0
  1949                           ; Regs used in _lcd_write_byte: [wreg+status,2+status,0+pclath+cstack]
  1950                           ;lcd_write_byte@data stored from wreg
  1951  0163  1283               	bcf	3,5	;RP0=0, select bank0
  1952  0164  1303               	bcf	3,6	;RP1=0, select bank0
  1953  0165  00AC               	movwf	lcd_write_byte@data
  1954                           
  1955                           ;i2c_lcd.c: 46: uint8_t shadow;
  1956                           ;i2c_lcd.c: 48: shadow = (data & 0xF0);
  1957  0166  00AD               	movwf	lcd_write_byte@shadow
  1958  0167  30F0               	movlw	240
  1959  0168  05AD               	andwf	lcd_write_byte@shadow,f
  1960                           
  1961                           ;i2c_lcd.c: 49: if(RS) shadow |= 0b00000001;
  1962  0169  0854               	movf	_RS,w
  1963  016A  1D03               	btfss	3,2
  1964  016B  142D               	bsf	lcd_write_byte@shadow,0
  1965                           
  1966                           ;i2c_lcd.c: 50: Write_I2C(shadow);
  1967  016C  082D               	movf	lcd_write_byte@shadow,w
  1968  016D  217D  118A         	fcall	_Write_I2C
  1969                           
  1970                           ;i2c_lcd.c: 51: strobe(shadow);
  1971  016F  082D               	movf	lcd_write_byte@shadow,w
  1972  0170  2194  118A         	fcall	_strobe
  1973                           
  1974                           ;i2c_lcd.c: 53: shadow = (data << 4);
  1975  0172  0E2C               	swapf	lcd_write_byte@data,w
  1976  0173  39F0               	andlw	240
  1977  0174  00AD               	movwf	lcd_write_byte@shadow
  1978                           
  1979                           ;i2c_lcd.c: 54: if(RS) shadow |= 0b00000001;
  1980  0175  0854               	movf	_RS,w
  1981  0176  1D03               	btfss	3,2
  1982  0177  142D               	bsf	lcd_write_byte@shadow,0
  1983                           
  1984                           ;i2c_lcd.c: 55: Write_I2C(shadow);
  1985  0178  082D               	movf	lcd_write_byte@shadow,w
  1986  0179  217D  118A         	fcall	_Write_I2C
  1987                           
  1988                           ;i2c_lcd.c: 56: strobe(shadow);
  1989  017B  082D               	movf	lcd_write_byte@shadow,w
  1990  017C  2994               	ljmp	_strobe
  1991  017D                     __end_of_lcd_write_byte:	
  1992  017D                     __ptext16:	
  1993 ;; *************** function _Write_I2C *****************
  1994 ;; Defined at:
  1995 ;;		line 28 in file "i2c_lcd.c"
  1996 ;; Parameters:    Size  Location     Type
  1997 ;;  data            1    wreg     unsigned char 
  1998 ;; Auto vars:     Size  Location     Type
  1999 ;;  data            1    8[BANK0 ] unsigned char 
  2000 ;;  ackflag         1    9[BANK0 ] unsigned char 
  2001 ;; Return value:  Size  Location     Type
  2002 ;;                  1    wreg      void 
  2003 ;; Registers used:
  2004 ;;		wreg, status,2, status,0, pclath, cstack
  2005 ;; Tracked objects:
  2006 ;;		On entry : 0/0
  2007 ;;		On exit  : 300/0
  2008 ;;		Unchanged: 0/0
  2009 ;; Data sizes:     COMMON   BANK0   BANK1
  2010 ;;      Params:         0       0       0
  2011 ;;      Locals:         0       2       0
  2012 ;;      Temps:          0       0       0
  2013 ;;      Totals:         0       2       0
  2014 ;;Total ram usage:        2 bytes
  2015 ;; Hardware stack levels used:    1
  2016 ;; Hardware stack levels required when called:    3
  2017 ;; This function calls:
  2018 ;;		_is_I2C_idle
  2019 ;; This function is called by:
  2020 ;;		_lcd_write_byte
  2021 ;;		_lcd_write_cmd
  2022 ;;		_strobe
  2023 ;;		_LCD_Init
  2024 ;; This function uses a non-reentrant model
  2025 ;;
  2026                           
  2027                           
  2028                           ;psect for function _Write_I2C
  2029  017D                     _Write_I2C:	
  2030                           
  2031                           ;incstack = 0
  2032                           ; Regs used in _Write_I2C: [wreg+status,2+status,0+pclath+cstack]
  2033                           ;Write_I2C@data stored from wreg
  2034  017D  1283               	bcf	3,5	;RP0=0, select bank0
  2035  017E  1303               	bcf	3,6	;RP1=0, select bank0
  2036  017F  00A8               	movwf	Write_I2C@data
  2037  0180                     l1271:	
  2038                           ;i2c_lcd.c: 31: while(ackflag)
  2039                           
  2040                           
  2041                           ;i2c_lcd.c: 30: uint8_t ackflag = 1;
  2042  0180  01A9               	clrf	Write_I2C@ackflag
  2043  0181  0AA9               	incf	Write_I2C@ackflag,f
  2044  0182                     l1285:	
  2045  0182  1283               	bcf	3,5	;RP0=0, select bank0
  2046  0183  0829               	movf	Write_I2C@ackflag,w
  2047  0184  1903               	btfsc	3,2
  2048  0185  0008               	return
  2049                           
  2050                           ;i2c_lcd.c: 32: {
  2051                           ;i2c_lcd.c: 33: is_I2C_idle();
  2052  0186  21AD  118A         	fcall	_is_I2C_idle
  2053                           
  2054                           ;i2c_lcd.c: 34: SSPIF = 0;
  2055  0188  118C               	bcf	12,3	;volatile
  2056                           
  2057                           ;i2c_lcd.c: 35: SSPBUF = data | 0b00001000;
  2058  0189  0828               	movf	Write_I2C@data,w
  2059  018A  3808               	iorlw	8
  2060  018B  0093               	movwf	19	;volatile
  2061  018C                     l190:	
  2062                           ;i2c_lcd.c: 36: while(!SSPIF);
  2063                           
  2064  018C  1D8C               	btfss	12,3	;volatile
  2065  018D  298C               	goto	l190
  2066                           
  2067                           ;i2c_lcd.c: 37: ackflag = 0;
  2068  018E  01A9               	clrf	Write_I2C@ackflag
  2069                           
  2070                           ;i2c_lcd.c: 38: if(ACKSTAT) ackflag = 1;
  2071  018F  1683               	bsf	3,5	;RP0=1, select bank1
  2072  0190  1F11               	btfss	17,6	;volatile
  2073  0191  2982               	goto	l1285
  2074  0192  1283               	bcf	3,5	;RP0=0, select bank0
  2075  0193  2980               	goto	l1271
  2076  0194                     __end_of_Write_I2C:	
  2077  0194                     __ptext15:	
  2078 ;; *************** function _strobe *****************
  2079 ;; Defined at:
  2080 ;;		line 118 in file "i2c_lcd.c"
  2081 ;; Parameters:    Size  Location     Type
  2082 ;;  cmd             1    wreg     unsigned char 
  2083 ;; Auto vars:     Size  Location     Type
  2084 ;;  cmd             1   11[BANK0 ] unsigned char 
  2085 ;; Return value:  Size  Location     Type
  2086 ;;                  1    wreg      void 
  2087 ;; Registers used:
  2088 ;;		wreg, status,2, status,0, pclath, cstack
  2089 ;; Tracked objects:
  2090 ;;		On entry : 0/0
  2091 ;;		On exit  : 300/0
  2092 ;;		Unchanged: 0/0
  2093 ;; Data sizes:     COMMON   BANK0   BANK1
  2094 ;;      Params:         0       0       0
  2095 ;;      Locals:         0       1       0
  2096 ;;      Temps:          0       1       0
  2097 ;;      Totals:         0       2       0
  2098 ;;Total ram usage:        2 bytes
  2099 ;; Hardware stack levels used:    1
  2100 ;; Hardware stack levels required when called:    4
  2101 ;; This function calls:
  2102 ;;		_Write_I2C
  2103 ;; This function is called by:
  2104 ;;		_lcd_write_byte
  2105 ;;		_lcd_write_cmd
  2106 ;;		_LCD_Init
  2107 ;; This function uses a non-reentrant model
  2108 ;;
  2109                           
  2110                           
  2111                           ;psect for function _strobe
  2112  0194                     _strobe:	
  2113                           
  2114                           ;incstack = 0
  2115                           ; Regs used in _strobe: [wreg+status,2+status,0+pclath+cstack]
  2116                           ;strobe@cmd stored from wreg
  2117  0194  1283               	bcf	3,5	;RP0=0, select bank0
  2118  0195  1303               	bcf	3,6	;RP1=0, select bank0
  2119  0196  00AB               	movwf	strobe@cmd
  2120                           
  2121                           ;i2c_lcd.c: 120: cmd |= 0b00000100;
  2122  0197  152B               	bsf	strobe@cmd,2
  2123                           
  2124                           ;i2c_lcd.c: 121: Write_I2C(cmd);
  2125  0198  082B               	movf	strobe@cmd,w
  2126  0199  217D  118A         	fcall	_Write_I2C
  2127                           
  2128                           ;i2c_lcd.c: 122: _delay((unsigned long)((1)*(20000000/4000000.0)));
  2129  019B  299C               	nop2	;2 cycle nop
  2130  019C  299D               	nop2	;2 cycle nop
  2131  019D  0000               	nop
  2132                           
  2133                           ;i2c_lcd.c: 123: cmd &= ~0b00000100;
  2134  019E  1283               	bcf	3,5	;RP0=0, select bank0
  2135  019F  1303               	bcf	3,6	;RP1=0, select bank0
  2136  01A0  112B               	bcf	strobe@cmd,2
  2137                           
  2138                           ;i2c_lcd.c: 124: Write_I2C(cmd);
  2139  01A1  082B               	movf	strobe@cmd,w
  2140  01A2  217D  118A         	fcall	_Write_I2C
  2141                           
  2142                           ;i2c_lcd.c: 125: _delay((unsigned long)((50)*(20000000/4000000.0)));
  2143  01A4  3053               	movlw	83
  2144  01A5  00AA               	movwf	??_strobe
  2145  01A6                     u1147:	
  2146  01A6  0BAA               	decfsz	??_strobe,f
  2147  01A7  29A6               	goto	u1147
  2148                           
  2149                           ;i2c_lcd.c: 126: PORTD = cmd;
  2150  01A8  1283               	bcf	3,5	;RP0=0, select bank0
  2151  01A9  1303               	bcf	3,6	;RP1=0, select bank0
  2152  01AA  082B               	movf	strobe@cmd,w
  2153  01AB  0088               	movwf	8	;volatile
  2154  01AC  0008               	return
  2155  01AD                     __end_of_strobe:	
  2156  01AD                     __ptext18:	
  2157 ;; *************** function _is_I2C_idle *****************
  2158 ;; Defined at:
  2159 ;;		line 8 in file "i2c_lcd.c"
  2160 ;; Parameters:    Size  Location     Type
  2161 ;;		None
  2162 ;; Auto vars:     Size  Location     Type
  2163 ;;		None
  2164 ;; Return value:  Size  Location     Type
  2165 ;;                  1    wreg      void 
  2166 ;; Registers used:
  2167 ;;		wreg, status,2, status,0
  2168 ;; Tracked objects:
  2169 ;;		On entry : 200/0
  2170 ;;		On exit  : 300/0
  2171 ;;		Unchanged: 0/0
  2172 ;; Data sizes:     COMMON   BANK0   BANK1
  2173 ;;      Params:         0       0       0
  2174 ;;      Locals:         0       0       0
  2175 ;;      Temps:          0       5       0
  2176 ;;      Totals:         0       5       0
  2177 ;;Total ram usage:        5 bytes
  2178 ;; Hardware stack levels used:    1
  2179 ;; Hardware stack levels required when called:    2
  2180 ;; This function calls:
  2181 ;;		Nothing
  2182 ;; This function is called by:
  2183 ;;		_I2C_Start
  2184 ;;		_Write_I2C
  2185 ;; This function uses a non-reentrant model
  2186 ;;
  2187                           
  2188                           
  2189                           ;psect for function _is_I2C_idle
  2190  01AD                     _is_I2C_idle:	
  2191  01AD                     l1269:	
  2192                           ;i2c_lcd.c: 10: while (( SSPCON2 & 0x1F ) | R_W );
  2193                           
  2194                           ;incstack = 0
  2195                           ; Regs used in _is_I2C_idle: [wreg+status,2+status,0]
  2196                           
  2197  01AD  1003               	clrc
  2198  01AE  1683               	bsf	3,5	;RP0=1, select bank1
  2199  01AF  1914               	btfsc	20,2	;volatile
  2200  01B0  1403               	setc
  2201  01B1  3000               	movlw	0
  2202  01B2  1803               	skipnc
  2203  01B3  3001               	movlw	1
  2204  01B4  1283               	bcf	3,5	;RP0=0, select bank0
  2205  01B5  00A3               	movwf	??_is_I2C_idle
  2206  01B6  301F               	movlw	31
  2207  01B7  01A4               	clrf	??_is_I2C_idle+1
  2208  01B8  1683               	bsf	3,5	;RP0=1, select bank1
  2209  01B9  0511               	andwf	17,w	;volatile
  2210  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  2211  01BB  00A5               	movwf	??_is_I2C_idle+2
  2212  01BC  0423               	iorwf	??_is_I2C_idle,w
  2213  01BD  00A6               	movwf	??_is_I2C_idle+3
  2214  01BE  0824               	movf	??_is_I2C_idle+1,w
  2215  01BF  00A7               	movwf	??_is_I2C_idle+4
  2216  01C0  0426               	iorwf	??_is_I2C_idle+3,w
  2217  01C1  1903               	btfsc	3,2
  2218  01C2  0008               	return
  2219  01C3  29AD               	goto	l1269
  2220  01C4                     __end_of_is_I2C_idle:	
  2221  01C4                     __ptext6:	
  2222 ;; *************** function ___lwdiv *****************
  2223 ;; Defined at:
  2224 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  2225 ;; Parameters:    Size  Location     Type
  2226 ;;  divisor         2    3[BANK0 ] unsigned int 
  2227 ;;  dividend        2    5[BANK0 ] unsigned int 
  2228 ;; Auto vars:     Size  Location     Type
  2229 ;;  quotient        2    7[BANK0 ] unsigned int 
  2230 ;;  counter         1    9[BANK0 ] unsigned char 
  2231 ;; Return value:  Size  Location     Type
  2232 ;;                  2    3[BANK0 ] unsigned int 
  2233 ;; Registers used:
  2234 ;;		wreg, status,2, status,0
  2235 ;; Tracked objects:
  2236 ;;		On entry : 300/0
  2237 ;;		On exit  : 300/0
  2238 ;;		Unchanged: 0/0
  2239 ;; Data sizes:     COMMON   BANK0   BANK1
  2240 ;;      Params:         0       4       0
  2241 ;;      Locals:         0       3       0
  2242 ;;      Temps:          0       0       0
  2243 ;;      Totals:         0       7       0
  2244 ;;Total ram usage:        7 bytes
  2245 ;; Hardware stack levels used:    1
  2246 ;; Hardware stack levels required when called:    2
  2247 ;; This function calls:
  2248 ;;		Nothing
  2249 ;; This function is called by:
  2250 ;;		_printf
  2251 ;; This function uses a non-reentrant model
  2252 ;;
  2253                           
  2254                           
  2255                           ;psect for function ___lwdiv
  2256  01C4                     ___lwdiv:	
  2257                           
  2258                           ;incstack = 0
  2259                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2260  01C4  01A7               	clrf	___lwdiv@quotient
  2261  01C5  01A8               	clrf	___lwdiv@quotient+1
  2262  01C6  0823               	movf	___lwdiv@divisor,w
  2263  01C7  0424               	iorwf	___lwdiv@divisor+1,w
  2264  01C8  1903               	btfsc	3,2
  2265  01C9  29E9               	goto	l1435
  2266  01CA  01A9               	clrf	___lwdiv@counter
  2267  01CB                     L3:	
  2268  01CB  0AA9               	incf	___lwdiv@counter,f
  2269  01CC  1BA4               	btfsc	___lwdiv@divisor+1,7
  2270  01CD  29D2               	goto	l1423
  2271  01CE  1003               	clrc
  2272  01CF  0DA3               	rlf	___lwdiv@divisor,f
  2273  01D0  0DA4               	rlf	___lwdiv@divisor+1,f
  2274  01D1  29CB               	goto	L3
  2275  01D2                     l1423:	
  2276  01D2  1003               	clrc
  2277  01D3  0DA7               	rlf	___lwdiv@quotient,f
  2278  01D4  0DA8               	rlf	___lwdiv@quotient+1,f
  2279  01D5  0824               	movf	___lwdiv@divisor+1,w
  2280  01D6  0226               	subwf	___lwdiv@dividend+1,w
  2281  01D7  1D03               	skipz
  2282  01D8  29DB               	goto	u665
  2283  01D9  0823               	movf	___lwdiv@divisor,w
  2284  01DA  0225               	subwf	___lwdiv@dividend,w
  2285  01DB                     u665:	
  2286  01DB  1C03               	skipc
  2287  01DC  29E5               	goto	L4
  2288  01DD  0823               	movf	___lwdiv@divisor,w
  2289  01DE  02A5               	subwf	___lwdiv@dividend,f
  2290  01DF  0824               	movf	___lwdiv@divisor+1,w
  2291  01E0  1C03               	skipc
  2292  01E1  03A6               	decf	___lwdiv@dividend+1,f
  2293  01E2  02A6               	subwf	___lwdiv@dividend+1,f
  2294  01E3  1427               	bsf	___lwdiv@quotient,0
  2295  01E4  1003               	clrc
  2296  01E5                     L4:	
  2297  01E5  0CA4               	rrf	___lwdiv@divisor+1,f
  2298  01E6  0CA3               	rrf	___lwdiv@divisor,f
  2299  01E7  0BA9               	decfsz	___lwdiv@counter,f
  2300  01E8  29D2               	goto	l1423
  2301  01E9                     l1435:	
  2302  01E9  0828               	movf	___lwdiv@quotient+1,w
  2303  01EA  00A4               	movwf	?___lwdiv+1
  2304  01EB  0827               	movf	___lwdiv@quotient,w
  2305  01EC  00A3               	movwf	?___lwdiv
  2306  01ED  0008               	return
  2307  01EE                     __end_of___lwdiv:	
  2308  01EE                     __ptext5:	
  2309 ;; *************** function ___lwmod *****************
  2310 ;; Defined at:
  2311 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
  2312 ;; Parameters:    Size  Location     Type
  2313 ;;  divisor         2   10[BANK0 ] unsigned int 
  2314 ;;  dividend        2   12[BANK0 ] unsigned int 
  2315 ;; Auto vars:     Size  Location     Type
  2316 ;;  counter         1   14[BANK0 ] unsigned char 
  2317 ;; Return value:  Size  Location     Type
  2318 ;;                  2   10[BANK0 ] unsigned int 
  2319 ;; Registers used:
  2320 ;;		wreg, status,2, status,0
  2321 ;; Tracked objects:
  2322 ;;		On entry : 300/0
  2323 ;;		On exit  : 300/0
  2324 ;;		Unchanged: 0/0
  2325 ;; Data sizes:     COMMON   BANK0   BANK1
  2326 ;;      Params:         0       4       0
  2327 ;;      Locals:         0       1       0
  2328 ;;      Temps:          0       0       0
  2329 ;;      Totals:         0       5       0
  2330 ;;Total ram usage:        5 bytes
  2331 ;; Hardware stack levels used:    1
  2332 ;; Hardware stack levels required when called:    2
  2333 ;; This function calls:
  2334 ;;		Nothing
  2335 ;; This function is called by:
  2336 ;;		_printf
  2337 ;; This function uses a non-reentrant model
  2338 ;;
  2339                           
  2340                           
  2341                           ;psect for function ___lwmod
  2342  01EE                     ___lwmod:	
  2343                           
  2344                           ;incstack = 0
  2345                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2346  01EE  082A               	movf	___lwmod@divisor,w
  2347  01EF  042B               	iorwf	___lwmod@divisor+1,w
  2348  01F0  1903               	btfsc	3,2
  2349  01F1  2A0D               	goto	l1455
  2350  01F2  01AE               	clrf	___lwmod@counter
  2351  01F3                     L1:	
  2352  01F3  0AAE               	incf	___lwmod@counter,f
  2353  01F4  1BAB               	btfsc	___lwmod@divisor+1,7
  2354  01F5  29FA               	goto	l1447
  2355  01F6  1003               	clrc
  2356  01F7  0DAA               	rlf	___lwmod@divisor,f
  2357  01F8  0DAB               	rlf	___lwmod@divisor+1,f
  2358  01F9  29F3               	goto	L1
  2359  01FA                     l1447:	
  2360  01FA  082B               	movf	___lwmod@divisor+1,w
  2361  01FB  022D               	subwf	___lwmod@dividend+1,w
  2362  01FC  1D03               	skipz
  2363  01FD  2A00               	goto	u705
  2364  01FE  082A               	movf	___lwmod@divisor,w
  2365  01FF  022C               	subwf	___lwmod@dividend,w
  2366  0200                     u705:	
  2367  0200  1C03               	skipc
  2368  0201  2A09               	goto	L2
  2369  0202  082A               	movf	___lwmod@divisor,w
  2370  0203  02AC               	subwf	___lwmod@dividend,f
  2371  0204  082B               	movf	___lwmod@divisor+1,w
  2372  0205  1C03               	skipc
  2373  0206  03AD               	decf	___lwmod@dividend+1,f
  2374  0207  02AD               	subwf	___lwmod@dividend+1,f
  2375  0208  1003               	clrc
  2376  0209                     L2:	
  2377  0209  0CAB               	rrf	___lwmod@divisor+1,f
  2378  020A  0CAA               	rrf	___lwmod@divisor,f
  2379  020B  0BAE               	decfsz	___lwmod@counter,f
  2380  020C  29FA               	goto	l1447
  2381  020D                     l1455:	
  2382  020D  082D               	movf	___lwmod@dividend+1,w
  2383  020E  00AB               	movwf	?___lwmod+1
  2384  020F  082C               	movf	___lwmod@dividend,w
  2385  0210  00AA               	movwf	?___lwmod
  2386  0211  0008               	return
  2387  0212                     __end_of___lwmod:	
  2388  0212                     __ptext4:	
  2389 ;; *************** function _EUSART_Write *****************
  2390 ;; Defined at:
  2391 ;;		line 89 in file "eusart.c"
  2392 ;; Parameters:    Size  Location     Type
  2393 ;;  txData          1    wreg     unsigned char 
  2394 ;; Auto vars:     Size  Location     Type
  2395 ;;  txData          1    3[BANK0 ] unsigned char 
  2396 ;; Return value:  Size  Location     Type
  2397 ;;                  1    wreg      void 
  2398 ;; Registers used:
  2399 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2400 ;; Tracked objects:
  2401 ;;		On entry : 300/0
  2402 ;;		On exit  : 300/100
  2403 ;;		Unchanged: 0/0
  2404 ;; Data sizes:     COMMON   BANK0   BANK1
  2405 ;;      Params:         0       0       0
  2406 ;;      Locals:         0       1       0
  2407 ;;      Temps:          0       0       0
  2408 ;;      Totals:         0       1       0
  2409 ;;Total ram usage:        1 bytes
  2410 ;; Hardware stack levels used:    1
  2411 ;; Hardware stack levels required when called:    2
  2412 ;; This function calls:
  2413 ;;		Nothing
  2414 ;; This function is called by:
  2415 ;;		_putch
  2416 ;; This function uses a non-reentrant model
  2417 ;;
  2418                           
  2419                           
  2420                           ;psect for function _EUSART_Write
  2421  0212                     _EUSART_Write:	
  2422                           
  2423                           ;incstack = 0
  2424                           ; Regs used in _EUSART_Write: [wreg-fsr0h+status,2+status,0]
  2425                           ;EUSART_Write@txData stored from wreg
  2426  0212  00A3               	movwf	EUSART_Write@txData
  2427  0213                     l1299:	
  2428                           ;eusart.c: 91: while(0 == eusartTxBufferRemaining)
  2429                           
  2430  0213  085B               	movf	_eusartTxBufferRemaining,w	;volatile
  2431  0214  1903               	btfsc	3,2
  2432  0215  2A13               	goto	l1299
  2433                           
  2434                           ;eusart.c: 93: }
  2435                           ;eusart.c: 95: if(0 == PIE1bits.TXIE)
  2436  0216  1683               	bsf	3,5	;RP0=1, select bank1
  2437  0217  1A0C               	btfsc	12,4	;volatile
  2438  0218  2A1D               	goto	l130
  2439                           
  2440                           ;eusart.c: 96: {
  2441                           ;eusart.c: 97: TXREG = txData;
  2442  0219  1283               	bcf	3,5	;RP0=0, select bank0
  2443  021A  0823               	movf	EUSART_Write@txData,w
  2444  021B  0099               	movwf	25	;volatile
  2445                           
  2446                           ;eusart.c: 98: }
  2447  021C  2A2B               	goto	l1313
  2448  021D                     l130:	
  2449                           
  2450                           ;eusart.c: 99: else
  2451                           ;eusart.c: 100: {
  2452                           ;eusart.c: 101: PIE1bits.TXIE = 0;
  2453  021D  120C               	bcf	12,4	;volatile
  2454                           
  2455                           ;eusart.c: 102: eusartTxBuffer[eusartTxHead++] = txData;
  2456  021E  1283               	bcf	3,5	;RP0=0, select bank0
  2457  021F  0858               	movf	_eusartTxHead,w
  2458  0220  3E49               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  2459  0221  0084               	movwf	4
  2460  0222  0823               	movf	EUSART_Write@txData,w
  2461  0223  1383               	bcf	3,7	;select IRP bank0
  2462  0224  0080               	movwf	0
  2463  0225  3008               	movlw	8
  2464  0226  0AD8               	incf	_eusartTxHead,f
  2465                           
  2466                           ;eusart.c: 103: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  2467  0227  0258               	subwf	_eusartTxHead,w
  2468  0228  1803               	btfsc	3,0
  2469                           
  2470                           ;eusart.c: 104: {
  2471                           ;eusart.c: 105: eusartTxHead = 0;
  2472  0229  01D8               	clrf	_eusartTxHead
  2473                           
  2474                           ;eusart.c: 106: }
  2475                           ;eusart.c: 107: eusartTxBufferRemaining--;
  2476  022A  03DB               	decf	_eusartTxBufferRemaining,f	;volatile
  2477  022B                     l1313:	
  2478                           
  2479                           ;eusart.c: 108: }
  2480                           ;eusart.c: 109: PIE1bits.TXIE = 1;
  2481  022B  1683               	bsf	3,5	;RP0=1, select bank1
  2482  022C  160C               	bsf	12,4	;volatile
  2483  022D  0008               	return
  2484  022E                     __end_of_EUSART_Write:	
  2485                           
  2486                           	psect	text8
  2487  045F                     __ptext8:	
  2488 ;; *************** function _delay *****************
  2489 ;; Defined at:
  2490 ;;		line 206 in file "main.c"
  2491 ;; Parameters:    Size  Location     Type
  2492 ;;  count           1    wreg     unsigned char 
  2493 ;; Auto vars:     Size  Location     Type
  2494 ;;  count           1    5[BANK0 ] unsigned char 
  2495 ;;  i               2    6[BANK0 ] int 
  2496 ;; Return value:  Size  Location     Type
  2497 ;;                  1    wreg      void 
  2498 ;; Registers used:
  2499 ;;		wreg, status,2, status,0
  2500 ;; Tracked objects:
  2501 ;;		On entry : 300/0
  2502 ;;		On exit  : 0/0
  2503 ;;		Unchanged: 0/0
  2504 ;; Data sizes:     COMMON   BANK0   BANK1
  2505 ;;      Params:         0       0       0
  2506 ;;      Locals:         0       3       0
  2507 ;;      Temps:          0       2       0
  2508 ;;      Totals:         0       5       0
  2509 ;;Total ram usage:        5 bytes
  2510 ;; Hardware stack levels used:    1
  2511 ;; Hardware stack levels required when called:    2
  2512 ;; This function calls:
  2513 ;;		Nothing
  2514 ;; This function is called by:
  2515 ;;		_main
  2516 ;; This function uses a non-reentrant model
  2517 ;;
  2518                           
  2519                           
  2520                           ;psect for function _delay
  2521  045F                     _delay:	
  2522                           
  2523                           ;incstack = 0
  2524                           ; Regs used in _delay: [wreg+status,2+status,0]
  2525                           ;delay@count stored from wreg
  2526  045F  00A5               	movwf	delay@count
  2527                           
  2528                           ;main.c: 207: for(int i=0; i < count; i++)
  2529  0460  01A6               	clrf	delay@i
  2530  0461  01A7               	clrf	delay@i+1
  2531  0462                     l1603:	
  2532  0462  0827               	movf	delay@i+1,w
  2533  0463  3A80               	xorlw	128
  2534  0464  00A3               	movwf	??_delay
  2535  0465  3080               	movlw	128
  2536  0466  0223               	subwf	??_delay,w
  2537  0467  1D03               	skipz
  2538  0468  2C6B               	goto	u845
  2539  0469  0825               	movf	delay@count,w
  2540  046A  0226               	subwf	delay@i,w
  2541  046B                     u845:	
  2542  046B  1803               	btfsc	3,0
  2543  046C  0008               	return
  2544                           
  2545                           ;main.c: 208: _delay((unsigned long)((25)*(20000000/4000.0)));
  2546  046D  30A3               	movlw	163
  2547  046E  1283               	bcf	3,5	;RP0=0, select bank0
  2548  046F  1303               	bcf	3,6	;RP1=0, select bank0
  2549  0470  00A4               	movwf	??_delay+1
  2550  0471  3055               	movlw	85
  2551  0472  00A3               	movwf	??_delay
  2552  0473                     u1067:	
  2553  0473  0BA3               	decfsz	??_delay,f
  2554  0474  2C73               	goto	u1067
  2555  0475  0BA4               	decfsz	??_delay+1,f
  2556  0476  2C73               	goto	u1067
  2557  0477  1283               	bcf	3,5	;RP0=0, select bank0
  2558  0478  1303               	bcf	3,6	;RP1=0, select bank0
  2559  0479  0AA6               	incf	delay@i,f
  2560  047A  1903               	skipnz
  2561  047B  0AA7               	incf	delay@i+1,f
  2562  047C  2C62               	goto	l1603
  2563  047D                     __end_of_delay:	
  2564                           
  2565                           	psect	text9
  2566  0426                     __ptext9:	
  2567 ;; *************** function _SYSTEM_Initialize *****************
  2568 ;; Defined at:
  2569 ;;		line 5 in file "global.c"
  2570 ;; Parameters:    Size  Location     Type
  2571 ;;		None
  2572 ;; Auto vars:     Size  Location     Type
  2573 ;;		None
  2574 ;; Return value:  Size  Location     Type
  2575 ;;                  1    wreg      void 
  2576 ;; Registers used:
  2577 ;;		wreg, status,2, status,0, pclath, cstack
  2578 ;; Tracked objects:
  2579 ;;		On entry : B00/0
  2580 ;;		On exit  : B00/100
  2581 ;;		Unchanged: 800/0
  2582 ;; Data sizes:     COMMON   BANK0   BANK1
  2583 ;;      Params:         0       0       0
  2584 ;;      Locals:         0       0       0
  2585 ;;      Temps:          0       0       0
  2586 ;;      Totals:         0       0       0
  2587 ;;Total ram usage:        0 bytes
  2588 ;; Hardware stack levels used:    1
  2589 ;; Hardware stack levels required when called:    3
  2590 ;; This function calls:
  2591 ;;		_EUSART_Initialize
  2592 ;;		_PIN_Initialize
  2593 ;; This function is called by:
  2594 ;;		_main
  2595 ;; This function uses a non-reentrant model
  2596 ;;
  2597                           
  2598                           
  2599                           ;psect for function _SYSTEM_Initialize
  2600  0426                     _SYSTEM_Initialize:	
  2601                           
  2602                           ;global.c: 7: PIN_Initialize();
  2603                           
  2604                           ;incstack = 0
  2605                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2606  0426  2440  118A         	fcall	_PIN_Initialize
  2607                           
  2608                           ;global.c: 8: EUSART_Initialize();
  2609  0428  2C29               	ljmp	l1333
  2610  0429                     __end_of_SYSTEM_Initialize:	
  2611  0429                     __ptext11:	
  2612 ;; *************** function _EUSART_Initialize *****************
  2613 ;; Defined at:
  2614 ;;		line 31 in file "eusart.c"
  2615 ;; Parameters:    Size  Location     Type
  2616 ;;		None
  2617 ;; Auto vars:     Size  Location     Type
  2618 ;;		None
  2619 ;; Return value:  Size  Location     Type
  2620 ;;                  1    wreg      void 
  2621 ;; Registers used:
  2622 ;;		wreg, status,2
  2623 ;; Tracked objects:
  2624 ;;		On entry : B00/0
  2625 ;;		On exit  : B00/100
  2626 ;;		Unchanged: 800/0
  2627 ;; Data sizes:     COMMON   BANK0   BANK1
  2628 ;;      Params:         0       0       0
  2629 ;;      Locals:         0       0       0
  2630 ;;      Temps:          0       0       0
  2631 ;;      Totals:         0       0       0
  2632 ;;Total ram usage:        0 bytes
  2633 ;; Hardware stack levels used:    1
  2634 ;; Hardware stack levels required when called:    2
  2635 ;; This function calls:
  2636 ;;		Nothing
  2637 ;; This function is called by:
  2638 ;;		_SYSTEM_Initialize
  2639 ;; This function uses a non-reentrant model
  2640 ;;
  2641                           
  2642                           
  2643                           ;psect for function _EUSART_Initialize
  2644  0429                     _EUSART_Initialize:	
  2645  0429                     l1333:	
  2646                           ;incstack = 0
  2647                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  2648                           
  2649                           
  2650                           ;eusart.c: 34: PIE1bits.RCIE = 0;
  2651  0429  1683               	bsf	3,5	;RP0=1, select bank1
  2652  042A  128C               	bcf	12,5	;volatile
  2653                           
  2654                           ;eusart.c: 35: PIE1bits.TXIE = 0;
  2655  042B  120C               	bcf	12,4	;volatile
  2656                           
  2657                           ;eusart.c: 41: RCSTA = 0x90;
  2658  042C  3090               	movlw	144
  2659  042D  1283               	bcf	3,5	;RP0=0, select bank0
  2660  042E  0098               	movwf	24	;volatile
  2661                           
  2662                           ;eusart.c: 44: TXSTA = 0x24;
  2663  042F  3024               	movlw	36
  2664  0430  1683               	bsf	3,5	;RP0=1, select bank1
  2665  0431  0098               	movwf	24	;volatile
  2666                           
  2667                           ;eusart.c: 47: SPBRG = 129;
  2668  0432  3081               	movlw	129
  2669  0433  0099               	movwf	25	;volatile
  2670                           
  2671                           ;eusart.c: 48: TRISCbits.TRISC7 = 1;
  2672  0434  1787               	bsf	7,7	;volatile
  2673                           
  2674                           ;eusart.c: 49: TRISCbits.TRISC6 = 1;
  2675  0435  1707               	bsf	7,6	;volatile
  2676                           
  2677                           ;eusart.c: 53: eusartTxHead = 0;
  2678  0436  1283               	bcf	3,5	;RP0=0, select bank0
  2679  0437  3008               	movlw	8
  2680  0438  01D8               	clrf	_eusartTxHead
  2681  0439  01D9               	clrf	_eusartTxTail
  2682                           
  2683                           ;eusart.c: 55: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  2684  043A  00DB               	movwf	_eusartTxBufferRemaining	;volatile
  2685                           
  2686                           ;eusart.c: 58: eusartRxTail = 0;
  2687  043B  01D7               	clrf	_eusartRxHead
  2688                           
  2689                           ;eusart.c: 59: eusartRxCount = 0;
  2690  043C  01D6               	clrf	_eusartRxCount	;volatile
  2691                           
  2692                           ;eusart.c: 62: PIE1bits.RCIE = 1;
  2693  043D  1683               	bsf	3,5	;RP0=1, select bank1
  2694  043E  168C               	bsf	12,5	;volatile
  2695  043F  0008               	return
  2696  0440                     __end_of_EUSART_Initialize:	
  2697  0440                     __ptext10:	
  2698 ;; *************** function _PIN_Initialize *****************
  2699 ;; Defined at:
  2700 ;;		line 14 in file "global.c"
  2701 ;; Parameters:    Size  Location     Type
  2702 ;;		None
  2703 ;; Auto vars:     Size  Location     Type
  2704 ;;		None
  2705 ;; Return value:  Size  Location     Type
  2706 ;;                  1    wreg      void 
  2707 ;; Registers used:
  2708 ;;		wreg, status,2
  2709 ;; Tracked objects:
  2710 ;;		On entry : B00/0
  2711 ;;		On exit  : B00/0
  2712 ;;		Unchanged: 800/0
  2713 ;; Data sizes:     COMMON   BANK0   BANK1
  2714 ;;      Params:         0       0       0
  2715 ;;      Locals:         0       0       0
  2716 ;;      Temps:          0       0       0
  2717 ;;      Totals:         0       0       0
  2718 ;;Total ram usage:        0 bytes
  2719 ;; Hardware stack levels used:    1
  2720 ;; Hardware stack levels required when called:    2
  2721 ;; This function calls:
  2722 ;;		Nothing
  2723 ;; This function is called by:
  2724 ;;		_SYSTEM_Initialize
  2725 ;; This function uses a non-reentrant model
  2726 ;;
  2727                           
  2728                           
  2729                           ;psect for function _PIN_Initialize
  2730  0440                     _PIN_Initialize:	
  2731                           
  2732                           ;global.c: 16: TRISD = 0x00;
  2733                           
  2734                           ;incstack = 0
  2735                           ; Regs used in _PIN_Initialize: [wreg+status,2]
  2736  0440  1683               	bsf	3,5	;RP0=1, select bank1
  2737  0441  0188               	clrf	8	;volatile
  2738                           
  2739                           ;global.c: 18: TRISCbits.TRISC0 = 0;
  2740  0442  1007               	bcf	7,0	;volatile
  2741                           
  2742                           ;global.c: 19: TRISCbits.TRISC6 = 1;
  2743  0443  1707               	bsf	7,6	;volatile
  2744                           
  2745                           ;global.c: 20: TRISCbits.TRISC7 = 1;
  2746  0444  1787               	bsf	7,7	;volatile
  2747                           
  2748                           ;global.c: 21: TRISCbits.TRISC3 = 1;
  2749  0445  1587               	bsf	7,3	;volatile
  2750                           
  2751                           ;global.c: 22: TRISCbits.TRISC4 = 1;
  2752  0446  1607               	bsf	7,4	;volatile
  2753                           
  2754                           ;global.c: 23: TRISBbits.TRISB4 = 1;
  2755  0447  1606               	bsf	6,4	;volatile
  2756                           
  2757                           ;global.c: 24: TRISBbits.TRISB5 = 1;
  2758  0448  1686               	bsf	6,5	;volatile
  2759                           
  2760                           ;global.c: 25: OPTION_REGbits.nRBPU = 0;
  2761  0449  1381               	bcf	1,7	;volatile
  2762                           
  2763                           ;global.c: 26: ADCON0 = 0x01;
  2764  044A  3001               	movlw	1
  2765  044B  1283               	bcf	3,5	;RP0=0, select bank0
  2766  044C  009F               	movwf	31	;volatile
  2767                           
  2768                           ;global.c: 27: ADCON1 = 0x02;
  2769  044D  3002               	movlw	2
  2770  044E  1683               	bsf	3,5	;RP0=1, select bank1
  2771  044F  009F               	movwf	31	;volatile
  2772                           
  2773                           ;global.c: 28: TRISA = 0x1F;
  2774  0450  301F               	movlw	31
  2775  0451  0085               	movwf	5	;volatile
  2776                           
  2777                           ;global.c: 29: SSPCON2 = 0x00;
  2778  0452  0191               	clrf	17	;volatile
  2779                           
  2780                           ;global.c: 30: SSPCON = 0x38;
  2781  0453  3038               	movlw	56
  2782  0454  1283               	bcf	3,5	;RP0=0, select bank0
  2783  0455  0094               	movwf	20	;volatile
  2784                           
  2785                           ;global.c: 31: SSPADD = 0x31;
  2786  0456  3031               	movlw	49
  2787  0457  1683               	bsf	3,5	;RP0=1, select bank1
  2788  0458  0093               	movwf	19	;volatile
  2789                           
  2790                           ;global.c: 32: SSPSTAT = 0x80;
  2791  0459  3080               	movlw	128
  2792  045A  0094               	movwf	20	;volatile
  2793                           
  2794                           ;global.c: 33: SSPIF = 0;
  2795  045B  1283               	bcf	3,5	;RP0=0, select bank0
  2796  045C  118C               	bcf	12,3	;volatile
  2797                           
  2798                           ;global.c: 34: BCLIF = 0;
  2799  045D  118D               	bcf	13,3	;volatile
  2800  045E  0008               	return
  2801  045F                     __end_of_PIN_Initialize:	
  2802                           
  2803                           	psect	text19
  2804  03BF                     __ptext19:	
  2805 ;; *************** function _InterruptManager *****************
  2806 ;; Defined at:
  2807 ;;		line 55 in file "main.c"
  2808 ;; Parameters:    Size  Location     Type
  2809 ;;		None
  2810 ;; Auto vars:     Size  Location     Type
  2811 ;;  temp            2    0        int 
  2812 ;; Return value:  Size  Location     Type
  2813 ;;                  1    wreg      void 
  2814 ;; Registers used:
  2815 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2816 ;; Tracked objects:
  2817 ;;		On entry : 0/0
  2818 ;;		On exit  : 300/0
  2819 ;;		Unchanged: 0/0
  2820 ;; Data sizes:     COMMON   BANK0   BANK1
  2821 ;;      Params:         0       0       0
  2822 ;;      Locals:         0       0       0
  2823 ;;      Temps:          0       3       0
  2824 ;;      Totals:         0       3       0
  2825 ;;Total ram usage:        3 bytes
  2826 ;; Hardware stack levels used:    1
  2827 ;; Hardware stack levels required when called:    1
  2828 ;; This function calls:
  2829 ;;		_EUSART_Receive_ISR
  2830 ;;		_EUSART_Transmit_ISR
  2831 ;; This function is called by:
  2832 ;;		Interrupt level 1
  2833 ;; This function uses a non-reentrant model
  2834 ;;
  2835                           
  2836                           
  2837                           ;psect for function _InterruptManager
  2838  03BF                     _InterruptManager:	
  2839                           
  2840                           ;main.c: 57: if(INTCONbits.RBIF==1)
  2841  03BF  1C0B               	btfss	11,0	;volatile
  2842  03C0  2BE5               	goto	i1l53
  2843                           
  2844                           ;main.c: 58: {
  2845                           ;main.c: 60: RBP1 = PORTBbits.RB4;
  2846  03C1  3000               	movlw	0
  2847  03C2  1A06               	btfsc	6,4	;volatile
  2848  03C3  3001               	movlw	1
  2849  03C4  00D1               	movwf	_RBP1
  2850                           
  2851                           ;main.c: 61: RBP2 = PORTBbits.RB5;
  2852  03C5  3000               	movlw	0
  2853  03C6  1A86               	btfsc	6,5	;volatile
  2854  03C7  3001               	movlw	1
  2855  03C8  00D3               	movwf	_RBP2
  2856                           
  2857                           ;main.c: 77: if((RBP1 != RBP1_prev) && RBP1 == 0){
  2858  03C9  0851               	movf	_RBP1,w
  2859  03CA  0652               	xorwf	_RBP1_prev,w
  2860  03CB  1903               	skipnz
  2861  03CC  2BE0               	goto	i1l1625
  2862  03CD  0851               	movf	_RBP1,w
  2863  03CE  1D03               	btfss	3,2
  2864  03CF  2BE0               	goto	i1l1625
  2865                           
  2866                           ;main.c: 79: changed = 1;
  2867  03D0  3001               	movlw	1
  2868  03D1  00D5               	movwf	_changed	;volatile
  2869                           
  2870                           ;main.c: 80: if(!(RBP2^RBP1))
  2871  03D2  0853               	movf	_RBP2,w
  2872  03D3  0651               	xorwf	_RBP1,w
  2873  03D4  1D03               	btfss	3,2
  2874  03D5  2BDC               	goto	i1l1621
  2875                           
  2876                           ;main.c: 81: {
  2877                           ;main.c: 83: if(counter>1){
  2878  03D6  3002               	movlw	2
  2879  03D7  025C               	subwf	_counter,w	;volatile
  2880  03D8  1C03               	skipc
  2881  03D9  2BE0               	goto	i1l1625
  2882                           
  2883                           ;main.c: 84: counter--;
  2884  03DA  03DC               	decf	_counter,f	;volatile
  2885  03DB  2BE0               	goto	i1l1625
  2886  03DC                     i1l1621:	
  2887                           
  2888                           ;main.c: 88: if(counter<32){
  2889  03DC  3020               	movlw	32
  2890  03DD  025C               	subwf	_counter,w	;volatile
  2891  03DE  1C03               	btfss	3,0
  2892                           
  2893                           ;main.c: 89: counter++;
  2894  03DF  0ADC               	incf	_counter,f	;volatile
  2895  03E0                     i1l1625:	
  2896                           
  2897                           ;main.c: 108: RBP2_prev = RBP2;
  2898  03E0  0851               	movf	_RBP1,w
  2899  03E1  00D2               	movwf	_RBP1_prev
  2900                           
  2901                           ;main.c: 109: int temp = PORTB;
  2902  03E2  0806               	movf	6,w	;volatile
  2903                           
  2904                           ;main.c: 110: INTCONbits.RBIF = 0;
  2905  03E3  100B               	bcf	11,0	;volatile
  2906                           
  2907                           ;main.c: 112: }else if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
  2908  03E4  2BF5               	goto	i1l63
  2909  03E5                     i1l53:	
  2910  03E5  1683               	bsf	3,5	;RP0=1, select bank1
  2911  03E6  1E0C               	btfss	12,4	;volatile
  2912  03E7  2BEE               	goto	i1l60
  2913  03E8  1283               	bcf	3,5	;RP0=0, select bank0
  2914  03E9  1E0C               	btfss	12,4	;volatile
  2915  03EA  2BEE               	goto	i1l60
  2916                           
  2917                           ;main.c: 113: {
  2918                           ;main.c: 114: EUSART_Transmit_ISR();
  2919  03EB  2412  118A         	fcall	_EUSART_Transmit_ISR
  2920                           
  2921                           ;main.c: 115: }
  2922  03ED  2BF5               	goto	i1l63
  2923  03EE                     i1l60:	
  2924                           
  2925                           ;main.c: 116: else if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
  2926  03EE  1683               	bsf	3,5	;RP0=1, select bank1
  2927  03EF  1E8C               	btfss	12,5	;volatile
  2928  03F0  2BF5               	goto	i1l63
  2929  03F1  1283               	bcf	3,5	;RP0=0, select bank0
  2930  03F2  1E8C               	btfss	12,5	;volatile
  2931  03F3  2BF5               	goto	i1l63
  2932                           
  2933                           ;main.c: 117: {
  2934                           ;main.c: 118: EUSART_Receive_ISR();
  2935  03F4  23FF               	fcall	_EUSART_Receive_ISR
  2936  03F5                     i1l63:	
  2937  03F5  1283               	bcf	3,5	;RP0=0, select bank0
  2938  03F6  0822               	movf	??_InterruptManager+2,w
  2939  03F7  008A               	movwf	10
  2940  03F8  0821               	movf	??_InterruptManager+1,w
  2941  03F9  0084               	movwf	4
  2942  03FA  0E20               	swapf	??_InterruptManager^0,w
  2943  03FB  0083               	movwf	3
  2944  03FC  0EFE               	swapf	126,f
  2945  03FD  0E7E               	swapf	126,w
  2946  03FE  0009               	retfie
  2947  03FF                     __end_of_InterruptManager:	
  2948  03FF                     __ptext21:	
  2949 ;; *************** function _EUSART_Receive_ISR *****************
  2950 ;; Defined at:
  2951 ;;		line 131 in file "eusart.c"
  2952 ;; Parameters:    Size  Location     Type
  2953 ;;		None
  2954 ;; Auto vars:     Size  Location     Type
  2955 ;;		None
  2956 ;; Return value:  Size  Location     Type
  2957 ;;                  1    wreg      void 
  2958 ;; Registers used:
  2959 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2960 ;; Tracked objects:
  2961 ;;		On entry : 300/0
  2962 ;;		On exit  : B00/0
  2963 ;;		Unchanged: 0/0
  2964 ;; Data sizes:     COMMON   BANK0   BANK1
  2965 ;;      Params:         0       0       0
  2966 ;;      Locals:         0       0       0
  2967 ;;      Temps:          0       0       0
  2968 ;;      Totals:         0       0       0
  2969 ;;Total ram usage:        0 bytes
  2970 ;; Hardware stack levels used:    1
  2971 ;; This function calls:
  2972 ;;		Nothing
  2973 ;; This function is called by:
  2974 ;;		_InterruptManager
  2975 ;; This function uses a non-reentrant model
  2976 ;;
  2977                           
  2978                           
  2979                           ;psect for function _EUSART_Receive_ISR
  2980  03FF                     _EUSART_Receive_ISR:	
  2981                           
  2982                           ;eusart.c: 134: if(1 == RCSTAbits.OERR)
  2983                           
  2984                           ;incstack = 0
  2985                           ; Regs used in _EUSART_Receive_ISR: [wreg-fsr0h+status,2+status,0]
  2986  03FF  1C98               	btfss	24,1	;volatile
  2987  0400  2C05               	goto	i1l1475
  2988                           
  2989                           ;eusart.c: 135: {
  2990                           ;eusart.c: 138: RCSTAbits.SPEN = 0;
  2991  0401  1398               	bcf	24,7	;volatile
  2992                           
  2993                           ;eusart.c: 139: RCSTAbits.SPEN = 1;
  2994  0402  1798               	bsf	24,7	;volatile
  2995                           
  2996                           ;eusart.c: 140: RCSTAbits.CREN = 0;
  2997  0403  1218               	bcf	24,4	;volatile
  2998                           
  2999                           ;eusart.c: 141: RCSTAbits.CREN = 1;
  3000  0404  1618               	bsf	24,4	;volatile
  3001  0405                     i1l1475:	
  3002                           
  3003                           ;eusart.c: 142: }
  3004                           ;eusart.c: 145: eusartRxBuffer[eusartRxHead++] = RCREG;
  3005  0405  0857               	movf	_eusartRxHead,w
  3006  0406  3E41               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  3007  0407  0084               	movwf	4
  3008  0408  081A               	movf	26,w	;volatile
  3009  0409  1383               	bcf	3,7	;select IRP bank0
  3010  040A  0080               	movwf	0
  3011  040B  3008               	movlw	8
  3012  040C  0AD7               	incf	_eusartRxHead,f
  3013                           
  3014                           ;eusart.c: 146: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  3015  040D  0257               	subwf	_eusartRxHead,w
  3016  040E  1803               	btfsc	3,0
  3017                           
  3018                           ;eusart.c: 147: {
  3019                           ;eusart.c: 148: eusartRxHead = 0;
  3020  040F  01D7               	clrf	_eusartRxHead
  3021                           
  3022                           ;eusart.c: 149: }
  3023                           ;eusart.c: 150: eusartRxCount++;
  3024  0410  0AD6               	incf	_eusartRxCount,f	;volatile
  3025  0411  0008               	return
  3026  0412                     __end_of_EUSART_Receive_ISR:	
  3027  007E                     btemp	set	126	;btemp
  3028  007E                     wtemp	set	126
  3029  007E                     wtemp0	set	126
  3030  0080                     wtemp1	set	128
  3031  0082                     wtemp2	set	130
  3032  0084                     wtemp3	set	132
  3033  0086                     wtemp4	set	134
  3034  0088                     wtemp5	set	136
  3035  007F                     wtemp6	set	127
  3036  007E                     ttemp	set	126
  3037  007E                     ttemp0	set	126
  3038  0081                     ttemp1	set	129
  3039  0084                     ttemp2	set	132
  3040  0087                     ttemp3	set	135
  3041  007F                     ttemp4	set	127
  3042  007E                     ltemp	set	126
  3043  007E                     ltemp0	set	126
  3044  0082                     ltemp1	set	130
  3045  0086                     ltemp2	set	134
  3046  0080                     ltemp3	set	128
  3047  0412                     __ptext20:	
  3048 ;; *************** function _EUSART_Transmit_ISR *****************
  3049 ;; Defined at:
  3050 ;;		line 112 in file "eusart.c"
  3051 ;; Parameters:    Size  Location     Type
  3052 ;;		None
  3053 ;; Auto vars:     Size  Location     Type
  3054 ;;		None
  3055 ;; Return value:  Size  Location     Type
  3056 ;;                  1    wreg      void 
  3057 ;; Registers used:
  3058 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3059 ;; Tracked objects:
  3060 ;;		On entry : 300/0
  3061 ;;		On exit  : 200/0
  3062 ;;		Unchanged: 0/0
  3063 ;; Data sizes:     COMMON   BANK0   BANK1
  3064 ;;      Params:         0       0       0
  3065 ;;      Locals:         0       0       0
  3066 ;;      Temps:          0       0       0
  3067 ;;      Totals:         0       0       0
  3068 ;;Total ram usage:        0 bytes
  3069 ;; Hardware stack levels used:    1
  3070 ;; This function calls:
  3071 ;;		Nothing
  3072 ;; This function is called by:
  3073 ;;		_InterruptManager
  3074 ;; This function uses a non-reentrant model
  3075 ;;
  3076                           
  3077                           
  3078                           ;psect for function _EUSART_Transmit_ISR
  3079  0412                     _EUSART_Transmit_ISR:	
  3080                           
  3081                           ;eusart.c: 116: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  3082                           
  3083                           ;incstack = 0
  3084                           ; Regs used in _EUSART_Transmit_ISR: [wreg-fsr0h+status,2+status,0]
  3085  0412  3008               	movlw	8
  3086  0413  025B               	subwf	_eusartTxBufferRemaining,w
  3087  0414  1803               	skipnc
  3088  0415  2C23               	goto	i1l136
  3089                           
  3090                           ;eusart.c: 117: {
  3091                           ;eusart.c: 118: TXREG = eusartTxBuffer[eusartTxTail++];
  3092  0416  0859               	movf	_eusartTxTail,w
  3093  0417  3E49               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  3094  0418  0084               	movwf	4
  3095  0419  1383               	bcf	3,7	;select IRP bank0
  3096  041A  0800               	movf	0,w
  3097  041B  0099               	movwf	25	;volatile
  3098  041C  3008               	movlw	8
  3099  041D  0AD9               	incf	_eusartTxTail,f
  3100                           
  3101                           ;eusart.c: 119: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  3102  041E  0259               	subwf	_eusartTxTail,w
  3103  041F  1803               	btfsc	3,0
  3104                           
  3105                           ;eusart.c: 120: {
  3106                           ;eusart.c: 121: eusartTxTail = 0;
  3107  0420  01D9               	clrf	_eusartTxTail
  3108                           
  3109                           ;eusart.c: 122: }
  3110                           ;eusart.c: 123: eusartTxBufferRemaining++;
  3111  0421  0ADB               	incf	_eusartTxBufferRemaining,f	;volatile
  3112                           
  3113                           ;eusart.c: 124: }
  3114  0422  0008               	return
  3115  0423                     i1l136:	
  3116                           
  3117                           ;eusart.c: 125: else
  3118                           ;eusart.c: 126: {
  3119                           ;eusart.c: 127: PIE1bits.TXIE = 0;
  3120  0423  1683               	bsf	3,5	;RP0=1, select bank1
  3121  0424  120C               	bcf	12,4	;volatile
  3122  0425  0008               	return
  3123  0426                     __end_of_EUSART_Transmit_ISR:	
  3124                           
  3125                           	psect	intentry
  3126  0004                     __pintentry:	
  3127                           ;incstack = 0
  3128                           ; Regs used in _InterruptManager: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3129                           
  3130  0004                     interrupt_function:	
  3131  007E                     saved_w	set	btemp
  3132  0004  00FE               	movwf	btemp
  3133  0005  0E03               	swapf	3,w
  3134  0006  1283               	bcf	3,5	;RP0=0, select bank0
  3135  0007  1303               	bcf	3,6	;RP1=0, select bank0
  3136  0008  00A0               	movwf	??_InterruptManager
  3137  0009  0804               	movf	4,w
  3138  000A  00A1               	movwf	??_InterruptManager+1
  3139  000B  080A               	movf	10,w
  3140  000C  00A2               	movwf	??_InterruptManager+2
  3141  000D  118A  2BBF         	ljmp	_InterruptManager


Data Sizes:
    Strings     118
    Constant    10
    Data        1
    BSS         26
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            94     33      61
    BANK1            94      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(1) Largest target is 31
		 -> STR_10(CODE[17]), STR_9(CODE[19]), STR_8(CODE[2]), STR_7(CODE[2]), 
		 -> STR_6(CODE[2]), STR_5(CODE[2]), STR_4(CODE[4]), STR_2(CODE[31]), 
		 -> STR_1(CODE[23]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    LCD_Write_Str@message	PTR const unsigned char  size(1) Largest target is 24
		 -> STR_3(CODE[24]), 

    LCD_Write_Str@message_ptr	PTR unsigned char  size(1) Largest target is 24
		 -> STR_3(CODE[24]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_printf
    _scrollDisplayLeft->_lcd_write_byte
    _printf->_putch
    _putch->_lcd_write_byte
    ___lwmod->___lwdiv
    _lcd_write_cmd->_strobe
    _LCD_Write_Str->_lcd_write_byte
    _LCD_Init->_lcd_write_byte
    _lcd_write_byte->_strobe
    _strobe->_Write_I2C
    _Write_I2C->_is_I2C_idle
    _I2C_Start->_is_I2C_idle

Critical Paths under _InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    3180
                                             28 BANK0      5     5      0
                          _I2C_Start
                           _LCD_Init
                      _LCD_Write_Str
                  _SYSTEM_Initialize
                              _delay
                      _lcd_write_cmd
                             _printf
                  _scrollDisplayLeft
 ---------------------------------------------------------------------------------
 (1) _scrollDisplayLeft                                    0     0      0     299
                     _lcd_write_byte
 ---------------------------------------------------------------------------------
 (1) _printf                                              19    17      2    1637
                                             17 BANK0     11     9      2
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                3     3      0     475
                                             14 BANK0      3     3      0
                       _EUSART_Write
                     _lcd_write_byte
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         1     1      0      44
                                              3 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     265
                                             10 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     268
                                              3 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcd_write_cmd                                        2     2      0     297
                                             12 BANK0      2     2      0
                          _Write_I2C
                             _strobe
 ---------------------------------------------------------------------------------
 (1) _delay                                                5     5      0      46
                                              3 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                  _EUSART_Initialize
                     _PIN_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_Str                                        2     2      0     394
                                             14 BANK0      2     2      0
                     _lcd_write_byte
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             3     3      0     461
                                             14 BANK0      3     3      0
                          _Write_I2C
                     _lcd_write_byte
                             _strobe
 ---------------------------------------------------------------------------------
 (2) _lcd_write_byte                                       2     2      0     299
                                             12 BANK0      2     2      0
                          _Write_I2C
                             _strobe
 ---------------------------------------------------------------------------------
 (3) _strobe                                               2     2      0     115
                                             10 BANK0      2     2      0
                          _Write_I2C
 ---------------------------------------------------------------------------------
 (4) _Write_I2C                                            2     2      0      47
                                              8 BANK0      2     2      0
                        _is_I2C_idle
 ---------------------------------------------------------------------------------
 (1) _I2C_Start                                            0     0      0       0
                        _is_I2C_idle
 ---------------------------------------------------------------------------------
 (5) _is_I2C_idle                                          5     5      0       0
                                              3 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptManager                                     5     5      0       0
                                              0 BANK0      3     3      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
 ---------------------------------------------------------------------------------
 (8) _EUSART_Transmit_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Receive_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Start
     _is_I2C_idle
   _LCD_Init
     _Write_I2C
       _is_I2C_idle
     _lcd_write_byte
       _Write_I2C
         _is_I2C_idle
       _strobe
         _Write_I2C
           _is_I2C_idle
     _strobe
       _Write_I2C
         _is_I2C_idle
   _LCD_Write_Str
     _lcd_write_byte
       _Write_I2C
         _is_I2C_idle
       _strobe
         _Write_I2C
           _is_I2C_idle
   _SYSTEM_Initialize
     _EUSART_Initialize
     _PIN_Initialize
   _delay
   _lcd_write_cmd
     _Write_I2C
       _is_I2C_idle
     _strobe
       _Write_I2C
         _is_I2C_idle
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _EUSART_Write
       _lcd_write_byte
         _Write_I2C
           _is_I2C_idle
         _strobe
           _Write_I2C
             _is_I2C_idle
   _scrollDisplayLeft
     _lcd_write_byte
       _Write_I2C
         _is_I2C_idle
       _strobe
         _Write_I2C
           _is_I2C_idle

 _InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               5E      0       0       6        0.0%
BITBANK1            5E      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               5E     21      3D       4       64.9%
BITBANK0            5E      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITCOMMON            0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3D       8        0.0%
ABS                  0      0      3D       7        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Thu Oct 27 22:59:31 2016

          ??_InterruptManager 0020                             pc 0002          LCD_Write_Str@message 002E  
          __size_of_I2C_Start 0008                   __CFG_CP$OFF 0000                            _RS 0054  
                          fsr 0004                           l130 021D                           l330 0134  
                         l190 018C                  __CFG_CPD$OFF 0000                           u705 0200  
                         _SEN 0488                           u665 01DB                           u845 046B  
                         u785 00FF                           u955 02D7                           u977 024A  
                         u987 0259                           u997 026A                           _R_W 04A2  
                         fsr0 0004                           indf 0000                  __CFG_FOSC$HS 0000  
                __CFG_LVP$OFF 0000                          l1313 022B                          l1333 0429  
                        l1271 0180                          l1423 01D2                          l1603 0462  
                        l1435 01E9                          l1371 0149                          l1363 0142  
                        l1269 01AD                          l1285 0182                          l1381 015E  
                        l1447 01FA                          l1455 020D                          l1359 013B  
                        l1551 00EE                          l1535 00D9                          l1545 00EC  
                        l1529 00C7                          l1299 0213                          l1563 010D  
                        l1565 0110                          l1591 002D                          l1567 0130  
                        l1559 0106                          l1569 00B6                          l1683 02B9  
                        l1693 02DD                          STR_1 0380                          STR_2 0349  
                        STR_3 0368                          STR_4 03BB                          STR_5 03BD  
                        STR_6 03BD                          STR_7 03BD                          STR_8 03BD  
                        STR_9 0397                          u1007 027B                          u1017 028C  
                        u1107 007F                          u1027 029D                          u1117 0088  
                        u1037 02AE                          u1127 0094                          u1047 02C2  
                        u1137 00A2                          u1057 015A                          u1147 01A6  
                        u1067 0473                          u1077 0055                          u1087 0063  
                        u1097 0070                          _RBP1 0051                          _RBP2 0053  
                        i1l60 03EE                          i1l53 03E5                          i1l63 03F5  
                __CFG_WRT$OFF 0000        __end_of_lcd_write_byte 017D                          _main 022E  
                        _uart 005A                          btemp 007E                          ltemp 007E  
              ?_lcd_write_cmd 0020                          start 000F                          ttemp 007E  
                        wtemp 007E                 _LCD_Write_Str 0029              __end_of_LCD_Init 00B1  
               ?_EUSART_Write 0020                         ?_main 0020                         _BCLIF 006B  
                       STR_10 03AA                 __CFG_WDTE$OFF 0000               __end_of___lwdiv 01EE  
                       i1l136 0423               __end_of___lwmod 0212                         _RCREG 001A  
                       _RCSTA 0018                         _SPBRG 0099                         _PORTB 0006  
                       _PORTD 0008                         _TRISA 0085                         _TRISD 0088  
                       _SSPIF 0063              lcd_write_cmd@cmd 002C                         _TXREG 0019  
                       _TXSTA 0098       __size_of_PIN_Initialize 001F                         _delay 045F  
             __end_of_dpowers 0349    __size_of_scrollDisplayLeft 0005                         _putch 0135  
                       main@i 003F             __end_of_I2C_Start 0029                __CFG_BOREN$OFF 0000  
                       pclath 000A                         ltemp0 007E                         ltemp1 0082  
                       ltemp2 0086                         ltemp3 0080                         ttemp0 007E  
                       ttemp1 0081                         ttemp2 0084                         ttemp3 0087  
                       ttemp4 007F                         status 0003               ?_lcd_write_byte 0020  
                       wtemp0 007E                         wtemp1 0080                         wtemp2 0082  
                       wtemp3 0084                         wtemp4 0086                         wtemp5 0088  
                       wtemp6 007F                ?_LCD_Write_Str 0020               __initialization 0011  
                __end_of_main 0339          __size_of_is_I2C_idle 0017                ??_EUSART_Write 0000  
    LCD_Write_Str@message_ptr 002F                        ??_main 003C                        ?_delay 0020  
                      _ADCON0 001F                        _ADCON1 009F                        ?_putch 0020  
                      i1l1621 03DC                        i1l1625 03E0                        i1l1475 0405  
             ??_lcd_write_cmd 0000                        _SSPADD 0093                        _SSPCON 0014  
                      _SSPBUF 0013                __CFG_PWRTE$OFF 0000                     ??___lwdiv 0000  
                   ??___lwmod 0000           _EUSART_Transmit_ISR 0412                        delay@i 0026  
                      _printf 00B1                        _strobe 0194                        saved_w 007E  
        ?_EUSART_Transmit_ISR 0020             _SYSTEM_Initialize 0426       __end_of__initialization 0019  
                   ?_LCD_Init 0020            __size_of_Write_I2C 0017            ?_SYSTEM_Initialize 0020  
             ??_LCD_Write_Str 0000                __pcstackCOMMON 0000                  __pidataBANK0 0000  
         ??_SYSTEM_Initialize 0000                 __end_of_delay 047D                 __end_of_putch 0163  
   __size_of_InterruptManager 0040                _PIN_Initialize 0440                _OPTION_REGbits 0081  
                     ??_delay 0023     __end_of_SYSTEM_Initialize 0429         ??_EUSART_Transmit_ISR 0000  
                     ??_putch 002E                    __pbssBANK0 0041          __end_of_EUSART_Write 022E  
                  ??_LCD_Init 002E   __size_of_EUSART_Receive_ISR 0013                    __pmaintext 022E  
                  __pintentry 0004                       _ACKSTAT 048E                       ?_printf 0031  
      __end_of_PIN_Initialize 045F                       ?_strobe 0020             __end_of_Write_I2C 0194  
               _eusartRxCount 0056              ??_lcd_write_byte 0000                       _SSPCON2 0091  
                     _SSPSTAT 0094                    __stringtab 0339                     _I2C_Start 0021  
                     ___lwdiv 01C4                       ___lwmod 01EE                       _changed 0055  
                     __ptext1 001C                       __ptext2 00B1                       __ptext3 0135  
                     __ptext4 0212                       __ptext5 01EE                       __ptext6 01C4  
                     __ptext7 003E                       __ptext8 045F                       __ptext9 0426  
             ?_PIN_Initialize 0020               __size_of_printf 0084               __size_of_strobe 0019  
                     _counter 005C                       _dpowers 033F            lcd_write_byte@data 002C  
                  delay@count 0025    __size_of_SYSTEM_Initialize 0003                       clrloop0 047E  
        end_of_initialization 0019                     _RBP1_prev 0052                    ?_I2C_Start 0020  
           _EUSART_Initialize 0429                 ??_is_I2C_idle 0023            ?_EUSART_Initialize 0020  
                   _RCSTAbits 0018                       printf@c 003B                       printf@f 003A  
         ??_EUSART_Initialize 0000                     _PORTBbits 0006              _InterruptManager 03BF  
            Write_I2C@ackflag 0029                     _TRISBbits 0086                     _TRISCbits 0087  
       __size_of_EUSART_Write 001C     __end_of_EUSART_Initialize 0440         __end_of_lcd_write_cmd 004F  
           __size_of_LCD_Init 0062           __end_of_is_I2C_idle 01C4                  _EUSART_Write 0212  
              __end_of_printf 0135                __end_of_strobe 01AD                 Write_I2C@data 0028  
         start_initialization 0011                   ??_I2C_Start 0000         __end_of_LCD_Write_Str 003E  
                 __pdataBANK0 005C                      ??_printf 0033                      ??_strobe 002A  
 __end_of_EUSART_Transmit_ISR 0426                     ___latbits 0001                 __pcstackBANK0 0020  
                   _Write_I2C 017D    __end_of_EUSART_Receive_ISR 0412    __size_of_EUSART_Initialize 0017  
                   __pnvBANK0 005B                   _is_I2C_idle 01AD              ___lwdiv@dividend 0025  
            ??_PIN_Initialize 0000                      ?___lwdiv 0023                      ?___lwmod 002A  
                _eusartRxHead 0057                  _eusartTxHead 0058                  _eusartTxTail 0059  
                   __pstrings 0339       _eusartTxBufferRemaining 005B                    ?_Write_I2C 0020  
            ___lwdiv@quotient 0027                __size_of_delay 001E          lcd_write_byte@shadow 002D  
              __size_of_putch 002E                _eusartRxBuffer 0041             interrupt_function 0004  
              _eusartTxBuffer 0049                      _LCD_Init 004F      __end_of_InterruptManager 03FF  
                   clear_ram0 047D                      _PIE1bits 008C                      _PIR1bits 000C  
                 __stringbase 033E                    printf@flag 0036                    printf@prec 0037  
         lcd_write_cmd@shadow 002D       __size_of_lcd_write_byte 001A              __size_of___lwdiv 002A  
            __size_of___lwmod 0024            __end_of__stringtab 033F               ___lwdiv@divisor 0023  
                 ??_Write_I2C 0000               ___lwdiv@counter 0029                      __ptext10 0440  
                    __ptext11 0429                      __ptext20 0412                      __ptext12 0029  
                    __ptext21 03FF                      __ptext13 004F                      __ptext14 0163  
                    __ptext15 0194                      __ptext16 017D                      __ptext17 0021  
                    __ptext18 01AD                      __ptext19 03BF                 __size_of_main 010B  
                   printf@val 0038                     putch@data 0030                    _INTCONbits 000B  
      __size_of_lcd_write_cmd 0011                      intlevel1 0000             _scrollDisplayLeft 001C  
            ___lwmod@dividend 002C            ?_scrollDisplayLeft 0020                     strobe@cmd 002B  
                   stringcode 0339                  ?_is_I2C_idle 0020           ??_scrollDisplayLeft 0000  
                    printf@ap 0035            _EUSART_Receive_ISR 03FF           ?_EUSART_Receive_ISR 0020  
             ___lwmod@divisor 002A               ___lwmod@counter 002E                      stringdir 0339  
                    stringtab 0339        __size_of_LCD_Write_Str 0015     __end_of_scrollDisplayLeft 0021  
          EUSART_Write@txData 0023  __size_of_EUSART_Transmit_ISR 0014          ??_EUSART_Receive_ISR 0000  
              _lcd_write_byte 0163             ?_InterruptManager 0020                 _lcd_write_cmd 003E  
